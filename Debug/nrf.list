
nrf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004008  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004460  08004460  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004460  08004460  00005460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004468  08004468  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004468  08004468  00005468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800446c  0800446c  0000546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004470  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  080044d8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080044d8  00006278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ff8  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a41  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00011ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000726  00000000  00000000  00012438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a4e  00000000  00000000  00012b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acc3  00000000  00000000  000295ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088bca  00000000  00000000  0003426f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bce39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d80  00000000  00000000  000bce7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000bfbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004190 	.word	0x08004190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004190 	.word	0x08004190

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b092      	sub	sp, #72	@ 0x48
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fd11 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f89b 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f959 	bl	8000870 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005be:	f000 f8f7 	bl	80007b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 f92b 	bl	800081c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  nrf_t nrf ={
 80005c6:	4b3c      	ldr	r3, [pc, #240]	@ (80006b8 <main+0x10c>)
 80005c8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	682b      	ldr	r3, [r5, #0]
 80005d4:	6023      	str	r3, [r4, #0]
	.csn_pin = CSN_Pin,
	.spi = &hspi1
  };


  uint8_t tx_addr[] = {0x11, 0x22, 0x33, 0x44, 0x55};
 80005d6:	4a39      	ldr	r2, [pc, #228]	@ (80006bc <main+0x110>)
 80005d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e0:	6018      	str	r0, [r3, #0]
 80005e2:	3304      	adds	r3, #4
 80005e4:	7019      	strb	r1, [r3, #0]
  nrf_init_tx(&nrf, tx_addr);
 80005e6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80005ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fa94 	bl	8000b1e <nrf_init_tx>
  //uint8_t data_to_send[]="hello world\n";
  //uint8_t counter = 0;

  // --- NEW DIAGNOSTIC TEST ---
    printf("--- NRF24L01 DIAGNOSTIC ---\r\n");
 80005f6:	4832      	ldr	r0, [pc, #200]	@ (80006c0 <main+0x114>)
 80005f8:	f002 ff68 	bl	80034cc <puts>
    uint8_t reg_val = nrf_read_reg(&nrf, NRF_REG_RF_CH);
 80005fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fa2a 	bl	8000a5c <nrf_read_reg>
 8000608:	4603      	mov	r3, r0
 800060a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    printf("Reading RF_CH (0x05): Should be 0x01.  Value: 0x%02X\r\n", reg_val);
 800060e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000612:	4619      	mov	r1, r3
 8000614:	482b      	ldr	r0, [pc, #172]	@ (80006c4 <main+0x118>)
 8000616:	f002 fef1 	bl	80033fc <iprintf>

    if (reg_val == 0x01) {
 800061a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800061e:	2b01      	cmp	r3, #1
 8000620:	d109      	bne.n	8000636 <main+0x8a>
        printf("DIAGNOSTIC: SUCCESS! SPI wiring is correct.\r\n");
 8000622:	4829      	ldr	r0, [pc, #164]	@ (80006c8 <main+0x11c>)
 8000624:	f002 ff52 	bl	80034cc <puts>
        printf("The 'timeout' error is almost certainly a POWER problem.\r\n");
 8000628:	4828      	ldr	r0, [pc, #160]	@ (80006cc <main+0x120>)
 800062a:	f002 ff4f 	bl	80034cc <puts>
        printf("Please add a 10uF capacitor to the module.\r\n");
 800062e:	4828      	ldr	r0, [pc, #160]	@ (80006d0 <main+0x124>)
 8000630:	f002 ff4c 	bl	80034cc <puts>
 8000634:	e008      	b.n	8000648 <main+0x9c>
    } else {
        printf("DIAGNOSTIC: FAILED! SPI communication is not working.\r\n");
 8000636:	4827      	ldr	r0, [pc, #156]	@ (80006d4 <main+0x128>)
 8000638:	f002 ff48 	bl	80034cc <puts>
        printf("Check VCC, GND, MISO, MOSI, SCK, and CSN wiring.\r\n");
 800063c:	4826      	ldr	r0, [pc, #152]	@ (80006d8 <main+0x12c>)
 800063e:	f002 ff45 	bl	80034cc <puts>
        printf("Default value is 0x02. 0x00 or 0xFF means bad wiring.\r\n");
 8000642:	4826      	ldr	r0, [pc, #152]	@ (80006dc <main+0x130>)
 8000644:	f002 ff42 	bl	80034cc <puts>
    }
    printf("--------------------------------\r\n");
 8000648:	4825      	ldr	r0, [pc, #148]	@ (80006e0 <main+0x134>)
 800064a:	f002 ff3f 	bl	80034cc <puts>
    // --- END OF DIAGNOSTIC TEST ---

    uint8_t data_to_send[32] = "hello world\n";
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <main+0x138>)
 8000650:	1d3c      	adds	r4, r7, #4
 8000652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000654:	c407      	stmia	r4!, {r0, r1, r2}
 8000656:	7023      	strb	r3, [r4, #0]
 8000658:	f107 0311 	add.w	r3, r7, #17
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	f8c3 200f 	str.w	r2, [r3, #15]
    uint8_t counter = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    /* USER CODE BEGIN 3 */
	  // Prepare some data

	      // Transmit the data

	  printf("Sending packet %d...\n ", counter);
 8000670:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000674:	4619      	mov	r1, r3
 8000676:	481c      	ldr	r0, [pc, #112]	@ (80006e8 <main+0x13c>)
 8000678:	f002 fec0 	bl	80033fc <iprintf>
	  int result = nrf_transmit(&nrf, data_to_send,32);
 800067c:	1d39      	adds	r1, r7, #4
 800067e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000682:	2220      	movs	r2, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fa9b 	bl	8000bc0 <nrf_transmit>
 800068a:	6438      	str	r0, [r7, #64]	@ 0x40

	  if (result == 0) {
 800068c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800068e:	2b00      	cmp	r3, #0
 8000690:	d102      	bne.n	8000698 <main+0xec>
		  printf("OK!\r\n");
 8000692:	4816      	ldr	r0, [pc, #88]	@ (80006ec <main+0x140>)
 8000694:	f002 ff1a 	bl	80034cc <puts>
	      } else {
	          // Error message is printed inside the driver
	      }
	  nrf_send_cmd(&nrf, NRF_CMD_FLUSH_TX);
 8000698:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800069c:	21e1      	movs	r1, #225	@ 0xe1
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fa26 	bl	8000af0 <nrf_send_cmd>
	  counter++;
 80006a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006a8:	3301      	adds	r3, #1
 80006aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  HAL_Delay(1000); // Wait 1 second
 80006ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006b2:	f000 fd03 	bl	80010bc <HAL_Delay>
  {
 80006b6:	e7db      	b.n	8000670 <main+0xc4>
 80006b8:	08004380 	.word	0x08004380
 80006bc:	08004394 	.word	0x08004394
 80006c0:	080041a8 	.word	0x080041a8
 80006c4:	080041c8 	.word	0x080041c8
 80006c8:	08004200 	.word	0x08004200
 80006cc:	08004230 	.word	0x08004230
 80006d0:	0800426c 	.word	0x0800426c
 80006d4:	08004298 	.word	0x08004298
 80006d8:	080042d0 	.word	0x080042d0
 80006dc:	08004304 	.word	0x08004304
 80006e0:	0800433c 	.word	0x0800433c
 80006e4:	0800439c 	.word	0x0800439c
 80006e8:	08004360 	.word	0x08004360
 80006ec:	08004378 	.word	0x08004378

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	@ 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	@ 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 ffc4 	bl	800368c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <SystemClock_Config+0xb8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	4a22      	ldr	r2, [pc, #136]	@ (80007a8 <SystemClock_Config+0xb8>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	@ 0x40
 8000724:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <SystemClock_Config+0xb8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <SystemClock_Config+0xbc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800073c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ac <SystemClock_Config+0xbc>)
 800073e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <SystemClock_Config+0xbc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	2300      	movs	r3, #0
 800075e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 ff51 	bl	800160c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000770:	f000 f908 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f9b4 	bl	8001afc <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800079a:	f000 f8f3 	bl	8000984 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	@ 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <MX_SPI1_Init+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007e4:	2220      	movs	r2, #32
 80007e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_SPI1_Init+0x64>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_SPI1_Init+0x64>)
 8000802:	f001 fb5b 	bl	8001ebc <HAL_SPI_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 f8ba 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000084 	.word	0x20000084
 8000818:	40013000 	.word	0x40013000

0800081c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <MX_USART1_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000854:	f002 f904 	bl	8002a60 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f891 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000dc 	.word	0x200000dc
 800086c:	40011000 	.word	0x40011000

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <MX_GPIO_Init+0xe0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a30      	ldr	r2, [pc, #192]	@ (8000950 <MX_GPIO_Init+0xe0>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <MX_GPIO_Init+0xe0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_GPIO_Init+0xe0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a29      	ldr	r2, [pc, #164]	@ (8000950 <MX_GPIO_Init+0xe0>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_GPIO_Init+0xe0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_GPIO_Init+0xe0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <MX_GPIO_Init+0xe0>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_GPIO_Init+0xe0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_GPIO_Init+0xe0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <MX_GPIO_Init+0xe0>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_GPIO_Init+0xe0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008fc:	4815      	ldr	r0, [pc, #84]	@ (8000954 <MX_GPIO_Init+0xe4>)
 80008fe:	f000 fe6b 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2103      	movs	r1, #3
 8000906:	4814      	ldr	r0, [pc, #80]	@ (8000958 <MX_GPIO_Init+0xe8>)
 8000908:	f000 fe66 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <MX_GPIO_Init+0xe4>)
 8000926:	f000 fcd3 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 800092a:	2303      	movs	r3, #3
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_GPIO_Init+0xe8>)
 8000942:	f000 fcc5 	bl	80012d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	@ 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020800 	.word	0x40020800
 8000958:	40020400 	.word	0x40020400

0800095c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
    // Use a 100ms timeout instead of HAL_MAX_DELAY
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	b29a      	uxth	r2, r3
 800096c:	2364      	movs	r3, #100	@ 0x64
 800096e:	68b9      	ldr	r1, [r7, #8]
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <_write+0x24>)
 8000972:	f002 f8c5 	bl	8002b00 <HAL_UART_Transmit>
    return len;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000dc 	.word	0x200000dc

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <set_csn_high>:
 */

#include "nRF24L01.h"
#include <stdio.h>

void set_csn_high(nrf_t *nrf){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->csn_port, nrf->csn_pin, 1);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6858      	ldr	r0, [r3, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	891b      	ldrh	r3, [r3, #8]
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	f000 fe18 	bl	80015d8 <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <set_csn_low>:

void set_csn_low(nrf_t *nrf){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->csn_port, nrf->csn_pin, 0);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6858      	ldr	r0, [r3, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	891b      	ldrh	r3, [r3, #8]
 80009c0:	2200      	movs	r2, #0
 80009c2:	4619      	mov	r1, r3
 80009c4:	f000 fe08 	bl	80015d8 <HAL_GPIO_WritePin>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <set_ce_high>:

void set_ce_high(nrf_t *nrf){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->ce_port, nrf->ce_pin, 1);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68d8      	ldr	r0, [r3, #12]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	8a1b      	ldrh	r3, [r3, #16]
 80009e0:	2201      	movs	r2, #1
 80009e2:	4619      	mov	r1, r3
 80009e4:	f000 fdf8 	bl	80015d8 <HAL_GPIO_WritePin>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <set_ce_low>:

void set_ce_low(nrf_t *nrf){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->ce_port, nrf->ce_pin, 0);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68d8      	ldr	r0, [r3, #12]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	8a1b      	ldrh	r3, [r3, #16]
 8000a00:	2200      	movs	r2, #0
 8000a02:	4619      	mov	r1, r3
 8000a04:	f000 fde8 	bl	80015d8 <HAL_GPIO_WritePin>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <nrf_write_reg>:

void nrf_write_reg(nrf_t *nrf, uint8_t reg, uint8_t data){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	70bb      	strb	r3, [r7, #2]

	uint8_t cmd = NRF_CMD_W_REGISTER | reg;
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	73fb      	strb	r3, [r7, #15]
	set_csn_low(nrf);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffc0 	bl	80009b0 <set_csn_low>
	HAL_SPI_Transmit(nrf->spi, &cmd, 1, 100);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	f107 010f 	add.w	r1, r7, #15
 8000a38:	2364      	movs	r3, #100	@ 0x64
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f001 fac7 	bl	8001fce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->spi, &data, 1, 100);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	1cb9      	adds	r1, r7, #2
 8000a46:	2364      	movs	r3, #100	@ 0x64
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f001 fac0 	bl	8001fce <HAL_SPI_Transmit>
	set_csn_high(nrf);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ff9e 	bl	8000990 <set_csn_high>
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <nrf_read_reg>:

uint8_t nrf_read_reg(nrf_t *nrf, uint8_t reg){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = NRF_CMD_R_REGISTER | reg;
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	73fb      	strb	r3, [r7, #15]
	uint8_t data;
	set_csn_low(nrf);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff9f 	bl	80009b0 <set_csn_low>
	HAL_SPI_Transmit(nrf->spi, &cmd, 1, 100);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f107 010f 	add.w	r1, r7, #15
 8000a7a:	2364      	movs	r3, #100	@ 0x64
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f001 faa6 	bl	8001fce <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->spi, &data, 1, 100);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	f107 010e 	add.w	r1, r7, #14
 8000a8a:	2364      	movs	r3, #100	@ 0x64
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f001 fbe2 	bl	8002256 <HAL_SPI_Receive>
	set_csn_high(nrf);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ff7c 	bl	8000990 <set_csn_high>
	return data;
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <nrf_write_reg_multi>:

void nrf_write_reg_multi(nrf_t *nrf, uint8_t reg, uint16_t size, uint8_t *data){
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	72fb      	strb	r3, [r7, #11]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	813b      	strh	r3, [r7, #8]
	uint8_t cmd = NRF_CMD_W_REGISTER | reg;
 8000ab4:	7afb      	ldrb	r3, [r7, #11]
 8000ab6:	f043 0320 	orr.w	r3, r3, #32
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	75fb      	strb	r3, [r7, #23]
	set_csn_low(nrf);
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ff76 	bl	80009b0 <set_csn_low>
	HAL_SPI_Transmit(nrf->spi, &cmd, 1, 100);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	f107 0117 	add.w	r1, r7, #23
 8000acc:	2364      	movs	r3, #100	@ 0x64
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f001 fa7d 	bl	8001fce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->spi, data, size, 100);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	893a      	ldrh	r2, [r7, #8]
 8000ada:	2364      	movs	r3, #100	@ 0x64
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	f001 fa76 	bl	8001fce <HAL_SPI_Transmit>
	set_csn_high(nrf);
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f7ff ff54 	bl	8000990 <set_csn_high>
}
 8000ae8:	bf00      	nop
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <nrf_send_cmd>:
	HAL_SPI_Transmit(nrf->spi, &cmd, 1, 100);
	HAL_SPI_Receive(nrf->spi, data, size, 100);
	set_csn_high(nrf);
}

void nrf_send_cmd(nrf_t *nrf, uint8_t cmd) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]
    set_csn_low(nrf);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff57 	bl	80009b0 <set_csn_low>
    HAL_SPI_Transmit(nrf->spi, &cmd, 1, 100);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	1cf9      	adds	r1, r7, #3
 8000b08:	2364      	movs	r3, #100	@ 0x64
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f001 fa5f 	bl	8001fce <HAL_SPI_Transmit>
    set_csn_high(nrf);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff3d 	bl	8000990 <set_csn_high>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <nrf_init_tx>:
	nrf_write_reg(nrf, NRF_REG_RF_SETUP, 0x00);
	set_csn_high(nrf);
	return 0;
}
*/
int nrf_init_tx(nrf_t *nrf, uint8_t *tx_addr){
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
	set_ce_low(nrf);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff61 	bl	80009f0 <set_ce_low>
	set_csn_high(nrf);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ff2e 	bl	8000990 <set_csn_high>
    HAL_Delay(100);
 8000b34:	2064      	movs	r0, #100	@ 0x64
 8000b36:	f000 fac1 	bl	80010bc <HAL_Delay>

	nrf_write_reg(nrf, NRF_REG_CONFIG, 0x00);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ff66 	bl	8000a10 <nrf_write_reg>
	nrf_write_reg(nrf, NRF_REG_EN_AA, 0x00);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2101      	movs	r1, #1
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff61 	bl	8000a10 <nrf_write_reg>
	nrf_write_reg(nrf, NRF_REG_EN_RXADDR, 0x00); // ???
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2102      	movs	r1, #2
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ff5c 	bl	8000a10 <nrf_write_reg>
	nrf_write_reg(nrf, NRF_REG_SETUP_AW, 0b11);
 8000b58:	2203      	movs	r2, #3
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff57 	bl	8000a10 <nrf_write_reg>
	nrf_write_reg(nrf, NRF_REG_SETUP_RETR, 0x00);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2104      	movs	r1, #4
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff52 	bl	8000a10 <nrf_write_reg>
	nrf_write_reg(nrf, NRF_REG_RF_CH, 1); // setting channel 1
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2105      	movs	r1, #5
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff4d 	bl	8000a10 <nrf_write_reg>
	nrf_write_reg(nrf, NRF_REG_RF_SETUP, 0x07);
 8000b76:	2207      	movs	r2, #7
 8000b78:	2106      	movs	r1, #6
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ff48 	bl	8000a10 <nrf_write_reg>
	nrf_write_reg_multi(nrf, NRF_REG_TX_ADDR, 5, tx_addr);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2205      	movs	r2, #5
 8000b84:	2110      	movs	r1, #16
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff8b 	bl	8000aa2 <nrf_write_reg_multi>
	nrf_write_reg(nrf, NRF_REG_RX_PW_P0, 32);
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	2111      	movs	r1, #17
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff3d 	bl	8000a10 <nrf_write_reg>
	nrf_send_cmd(nrf, NRF_CMD_FLUSH_TX);
 8000b96:	21e1      	movs	r1, #225	@ 0xe1
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ffa9 	bl	8000af0 <nrf_send_cmd>
	nrf_send_cmd(nrf, NRF_CMD_FLUSH_RX);
 8000b9e:	21e2      	movs	r1, #226	@ 0xe2
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ffa5 	bl	8000af0 <nrf_send_cmd>
	nrf_write_reg(nrf, NRF_REG_CONFIG, 0b00000010); // POWER UP
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	2100      	movs	r1, #0
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ff30 	bl	8000a10 <nrf_write_reg>
	HAL_Delay(10);
 8000bb0:	200a      	movs	r0, #10
 8000bb2:	f000 fa83 	bl	80010bc <HAL_Delay>
	return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <nrf_transmit>:


int nrf_transmit(nrf_t *nrf, uint8_t *data, uint16_t size){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	80fb      	strh	r3, [r7, #6]
	uint8_t status;
	uint32_t start_time = HAL_GetTick();
 8000bce:	f000 fa69 	bl	80010a4 <HAL_GetTick>
 8000bd2:	6178      	str	r0, [r7, #20]
	set_csn_low(nrf);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff feeb 	bl	80009b0 <set_csn_low>
	uint8_t cmd = NRF_CMD_W_TX_PAYLOAD;
 8000bda:	23a0      	movs	r3, #160	@ 0xa0
 8000bdc:	74bb      	strb	r3, [r7, #18]
	HAL_SPI_Transmit(nrf->spi, &cmd, 1, 100);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	f107 0112 	add.w	r1, r7, #18
 8000be6:	2364      	movs	r3, #100	@ 0x64
 8000be8:	2201      	movs	r2, #1
 8000bea:	f001 f9f0 	bl	8001fce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->spi, data, size, 100);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	2364      	movs	r3, #100	@ 0x64
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	f001 f9e9 	bl	8001fce <HAL_SPI_Transmit>
	set_csn_high(nrf);
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff fec7 	bl	8000990 <set_csn_high>

	set_ce_high(nrf);
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff fee4 	bl	80009d0 <set_ce_high>
	HAL_Delay(1); // 1ms pulse (min is 10us, 1ms is very safe)
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f000 fa57 	bl	80010bc <HAL_Delay>
	set_ce_low(nrf);
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f7ff feee 	bl	80009f0 <set_ce_low>
	*/

	// 3. *** CRITICAL FIX: CHECK NRF_REG_STATUS, NOT FIFO_STATUS ***
	    while(1) {
	        // Read the main STATUS register (0x07)
	        status = nrf_read_reg(nrf, NRF_REG_STATUS);
 8000c14:	2107      	movs	r1, #7
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f7ff ff20 	bl	8000a5c <nrf_read_reg>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	74fb      	strb	r3, [r7, #19]

	        // --- SUCCESS: Data Sent (TX_DS) ---
	        if (status & (1 << 5)) {
 8000c20:	7cfb      	ldrb	r3, [r7, #19]
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <nrf_transmit+0x78>
	            nrf_write_reg(nrf, NRF_REG_STATUS, (1 << 5)); // Clear flag
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	2107      	movs	r1, #7
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff feee 	bl	8000a10 <nrf_write_reg>
	            return 0; // Success
 8000c34:	2300      	movs	r3, #0
 8000c36:	e01d      	b.n	8000c74 <nrf_transmit+0xb4>
	        }

	        // --- FAILURE: Max Retries (MAX_RT) ---
	        if (status & (1 << 4)) {
 8000c38:	7cfb      	ldrb	r3, [r7, #19]
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00d      	beq.n	8000c5e <nrf_transmit+0x9e>
	            printf("message could not be transmitted (MAX_RT)\n");
 8000c42:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <nrf_transmit+0xbc>)
 8000c44:	f002 fc42 	bl	80034cc <puts>
	            nrf_write_reg(nrf, NRF_REG_STATUS, (1 << 4)); // Clear flag
 8000c48:	2210      	movs	r2, #16
 8000c4a:	2107      	movs	r1, #7
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff fedf 	bl	8000a10 <nrf_write_reg>
	            nrf_send_cmd(nrf, NRF_CMD_FLUSH_TX); // Flush the failed packet
 8000c52:	21e1      	movs	r1, #225	@ 0xe1
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f7ff ff4b 	bl	8000af0 <nrf_send_cmd>
	            return 1; // Failure
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00a      	b.n	8000c74 <nrf_transmit+0xb4>
	        }

	        // --- TIMEOUT ---
	        if (HAL_GetTick() - start_time > 100) { // 100ms timeout
 8000c5e:	f000 fa21 	bl	80010a4 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	2b64      	cmp	r3, #100	@ 0x64
 8000c6a:	d9d3      	bls.n	8000c14 <nrf_transmit+0x54>
	            printf("message could not be transmitted (timeout)\n");
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <nrf_transmit+0xc0>)
 8000c6e:	f002 fc2d 	bl	80034cc <puts>
	            return 1; // Failure
 8000c72:	2301      	movs	r3, #1
	        }
	    }
	return 0;
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	080043bc 	.word	0x080043bc
 8000c80:	080043e8 	.word	0x080043e8

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	@ (8000d58 <HAL_SPI_MspInit+0x84>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12b      	bne.n	8000d4e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23e0      	movs	r3, #224	@ 0xe0
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_SPI_MspInit+0x8c>)
 8000d4a:	f000 fac1 	bl	80012d0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40013000 	.word	0x40013000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12c      	bne.n	8000de0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dbe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <HAL_UART_MspInit+0x8c>)
 8000ddc:	f000 fa78 	bl	80012d0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	@ 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f917 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e00a      	b.n	8000e7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e64:	f3af 8000 	nop.w
 8000e68:	4601      	mov	r1, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	60ba      	str	r2, [r7, #8]
 8000e70:	b2ca      	uxtb	r2, r1
 8000e72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbf0      	blt.n	8000e64 <_read+0x12>
  }

  return len;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eb4:	605a      	str	r2, [r3, #4]
  return 0;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_isatty>:

int _isatty(int file)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ecc:	2301      	movs	r3, #1
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f002 fc00 	bl	8003728 <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20018000 	.word	0x20018000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	20000124 	.word	0x20000124
 8000f5c:	20000278 	.word	0x20000278

08000f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f88:	f7ff ffea 	bl	8000f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	@ (8000fc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	@ (8000fc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f002 fbbf 	bl	8003734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff faf9 	bl	80005ac <main>
  bx  lr    
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fc8:	08004470 	.word	0x08004470
  ldr r2, =_sbss
 8000fcc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fd0:	20000278 	.word	0x20000278

08000fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <HAL_Init+0x40>)
 8000fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <HAL_Init+0x40>)
 8000fee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <HAL_Init+0x40>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f931 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	200f      	movs	r0, #15
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fe3a 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f93b 	bl	80012b6 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f911 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	@ (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000128 	.word	0x20000128

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000128 	.word	0x20000128

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	@ (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff47 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff5c 	bl	800114c <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffb0 	bl	8001224 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	@ 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	e159      	b.n	80015a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8148 	bne.w	800159a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d005      	beq.n	8001322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131e:	2b02      	cmp	r3, #2
 8001320:	d130      	bne.n	8001384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001358:	2201      	movs	r2, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b03      	cmp	r3, #3
 800138e:	d017      	beq.n	80013c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d123      	bne.n	8001414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80a2 	beq.w	800159a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b57      	ldr	r3, [pc, #348]	@ (80015b8 <HAL_GPIO_Init+0x2e8>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	4a56      	ldr	r2, [pc, #344]	@ (80015b8 <HAL_GPIO_Init+0x2e8>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001464:	6453      	str	r3, [r2, #68]	@ 0x44
 8001466:	4b54      	ldr	r3, [pc, #336]	@ (80015b8 <HAL_GPIO_Init+0x2e8>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001472:	4a52      	ldr	r2, [pc, #328]	@ (80015bc <HAL_GPIO_Init+0x2ec>)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a49      	ldr	r2, [pc, #292]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d019      	beq.n	80014d2 <HAL_GPIO_Init+0x202>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a48      	ldr	r2, [pc, #288]	@ (80015c4 <HAL_GPIO_Init+0x2f4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x1fe>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a47      	ldr	r2, [pc, #284]	@ (80015c8 <HAL_GPIO_Init+0x2f8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x1fa>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a46      	ldr	r2, [pc, #280]	@ (80015cc <HAL_GPIO_Init+0x2fc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x1f6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a45      	ldr	r2, [pc, #276]	@ (80015d0 <HAL_GPIO_Init+0x300>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x1f2>
 80014be:	2304      	movs	r3, #4
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014c2:	2307      	movs	r3, #7
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	@ (80015bc <HAL_GPIO_Init+0x2ec>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b38      	ldr	r3, [pc, #224]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a2f      	ldr	r2, [pc, #188]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a24      	ldr	r2, [pc, #144]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1a      	ldr	r2, [pc, #104]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f aea2 	bls.w	80012ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	@ 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40013c00 	.word	0x40013c00

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e267      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d075      	beq.n	8001716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800162a:	4b88      	ldr	r3, [pc, #544]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b04      	cmp	r3, #4
 8001634:	d00c      	beq.n	8001650 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001636:	4b85      	ldr	r3, [pc, #532]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800163e:	2b08      	cmp	r3, #8
 8001640:	d112      	bne.n	8001668 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001642:	4b82      	ldr	r3, [pc, #520]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b7e      	ldr	r3, [pc, #504]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d05b      	beq.n	8001714 <HAL_RCC_OscConfig+0x108>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d157      	bne.n	8001714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e242      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x74>
 8001672:	4b76      	ldr	r3, [pc, #472]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a75      	ldr	r2, [pc, #468]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e01d      	b.n	80016bc <HAL_RCC_OscConfig+0xb0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x98>
 800168a:	4b70      	ldr	r3, [pc, #448]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6f      	ldr	r2, [pc, #444]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b6d      	ldr	r3, [pc, #436]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6c      	ldr	r2, [pc, #432]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0xb0>
 80016a4:	4b69      	ldr	r3, [pc, #420]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a68      	ldr	r2, [pc, #416]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b66      	ldr	r3, [pc, #408]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a65      	ldr	r2, [pc, #404]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fcee 	bl	80010a4 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fcea 	bl	80010a4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	@ 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e207      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b5b      	ldr	r3, [pc, #364]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0xc0>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fcda 	bl	80010a4 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fcd6 	bl	80010a4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1f3      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	4b51      	ldr	r3, [pc, #324]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0xe8>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d063      	beq.n	80017ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001722:	4b4a      	ldr	r3, [pc, #296]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172e:	4b47      	ldr	r3, [pc, #284]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001736:	2b08      	cmp	r3, #8
 8001738:	d11c      	bne.n	8001774 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173a:	4b44      	ldr	r3, [pc, #272]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	4b41      	ldr	r3, [pc, #260]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x152>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e1c7      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4b3b      	ldr	r3, [pc, #236]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4937      	ldr	r1, [pc, #220]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	e03a      	b.n	80017ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177c:	4b34      	ldr	r3, [pc, #208]	@ (8001850 <HAL_RCC_OscConfig+0x244>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff fc8f 	bl	80010a4 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178a:	f7ff fc8b 	bl	80010a4 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e1a8      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b28      	ldr	r3, [pc, #160]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4925      	ldr	r1, [pc, #148]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e015      	b.n	80017ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017be:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <HAL_RCC_OscConfig+0x244>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fc6e 	bl	80010a4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc6a 	bl	80010a4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e187      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d036      	beq.n	8001864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d016      	beq.n	800182c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_RCC_OscConfig+0x248>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fc4e 	bl	80010a4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fc4a 	bl	80010a4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e167      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_RCC_OscConfig+0x240>)
 8001820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x200>
 800182a:	e01b      	b.n	8001864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <HAL_RCC_OscConfig+0x248>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff fc37 	bl	80010a4 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	e00e      	b.n	8001858 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183a:	f7ff fc33 	bl	80010a4 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d907      	bls.n	8001858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e150      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
 800184c:	40023800 	.word	0x40023800
 8001850:	42470000 	.word	0x42470000
 8001854:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	4b88      	ldr	r3, [pc, #544]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 800185a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1ea      	bne.n	800183a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 8097 	beq.w	80019a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001876:	4b81      	ldr	r3, [pc, #516]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10f      	bne.n	80018a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b7d      	ldr	r3, [pc, #500]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b7a      	ldr	r3, [pc, #488]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b77      	ldr	r3, [pc, #476]	@ (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b74      	ldr	r3, [pc, #464]	@ (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a73      	ldr	r2, [pc, #460]	@ (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fbf3 	bl	80010a4 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff fbef 	bl	80010a4 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e10c      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x2ea>
 80018e8:	4b64      	ldr	r3, [pc, #400]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ec:	4a63      	ldr	r2, [pc, #396]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f4:	e01c      	b.n	8001930 <HAL_RCC_OscConfig+0x324>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x30c>
 80018fe:	4b5f      	ldr	r3, [pc, #380]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001902:	4a5e      	ldr	r2, [pc, #376]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6713      	str	r3, [r2, #112]	@ 0x70
 800190a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190e:	4a5b      	ldr	r2, [pc, #364]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6713      	str	r3, [r2, #112]	@ 0x70
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x324>
 8001918:	4b58      	ldr	r3, [pc, #352]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191c:	4a57      	ldr	r2, [pc, #348]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6713      	str	r3, [r2, #112]	@ 0x70
 8001924:	4b55      	ldr	r3, [pc, #340]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001928:	4a54      	ldr	r2, [pc, #336]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d015      	beq.n	8001964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fbb4 	bl	80010a4 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fbb0 	bl	80010a4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0cb      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	4b49      	ldr	r3, [pc, #292]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0ee      	beq.n	8001940 <HAL_RCC_OscConfig+0x334>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fb9e 	bl	80010a4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	e00a      	b.n	8001982 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196c:	f7ff fb9a 	bl	80010a4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e0b5      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001982:	4b3e      	ldr	r3, [pc, #248]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ee      	bne.n	800196c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b39      	ldr	r3, [pc, #228]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	4a38      	ldr	r2, [pc, #224]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 800199a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a1 	beq.w	8001aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019aa:	4b34      	ldr	r3, [pc, #208]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d05c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d141      	bne.n	8001a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <HAL_RCC_OscConfig+0x478>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb6e 	bl	80010a4 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff fb6a 	bl	80010a4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e087      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	019b      	lsls	r3, r3, #6
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	085b      	lsrs	r3, r3, #1
 8001a02:	3b01      	subs	r3, #1
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	491b      	ldr	r1, [pc, #108]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <HAL_RCC_OscConfig+0x478>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fb43 	bl	80010a4 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fb3f 	bl	80010a4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e05c      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x416>
 8001a40:	e054      	b.n	8001aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_RCC_OscConfig+0x478>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb2c 	bl	80010a4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fb28 	bl	80010a4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e045      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x444>
 8001a6e:	e03d      	b.n	8001aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e038      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000
 8001a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <HAL_RCC_OscConfig+0x4ec>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d028      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d121      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d11a      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ab8:	4013      	ands	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d111      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ace:	085b      	lsrs	r3, r3, #1
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0cc      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b68      	ldr	r3, [pc, #416]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d90c      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b65      	ldr	r3, [pc, #404]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b63      	ldr	r3, [pc, #396]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0b8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b50:	4b59      	ldr	r3, [pc, #356]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a58      	ldr	r2, [pc, #352]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4b53      	ldr	r3, [pc, #332]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b50      	ldr	r3, [pc, #320]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	494d      	ldr	r1, [pc, #308]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d044      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b47      	ldr	r3, [pc, #284]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d119      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e067      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b37      	ldr	r3, [pc, #220]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4934      	ldr	r1, [pc, #208]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7ff fa5a 	bl	80010a4 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff fa56 	bl	80010a4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e04f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d20c      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e032      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4916      	ldr	r1, [pc, #88]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6e:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490e      	ldr	r1, [pc, #56]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f821 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490a      	ldr	r1, [pc, #40]	@ (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f9ba 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	08004414 	.word	0x08004414
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ccc:	b090      	sub	sp, #64	@ 0x40
 8001cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce0:	4b59      	ldr	r3, [pc, #356]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d00d      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x40>
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	f200 80a1 	bhi.w	8001e34 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x34>
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cfa:	e09b      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b53      	ldr	r3, [pc, #332]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d00:	e09b      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d02:	4b53      	ldr	r3, [pc, #332]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d06:	e098      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d08:	4b4f      	ldr	r3, [pc, #316]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d12:	4b4d      	ldr	r3, [pc, #308]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d028      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	099b      	lsrs	r3, r3, #6
 8001d24:	2200      	movs	r2, #0
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d30:	2100      	movs	r1, #0
 8001d32:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d34:	fb03 f201 	mul.w	r2, r3, r1
 8001d38:	2300      	movs	r3, #0
 8001d3a:	fb00 f303 	mul.w	r3, r0, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a43      	ldr	r2, [pc, #268]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d42:	fba0 1202 	umull	r1, r2, r0, r2
 8001d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d48:	460a      	mov	r2, r1
 8001d4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d4e:	4413      	add	r3, r2
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d54:	2200      	movs	r2, #0
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	61fa      	str	r2, [r7, #28]
 8001d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d62:	f7fe fa8d 	bl	8000280 <__aeabi_uldivmod>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d6e:	e053      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d70:	4b35      	ldr	r3, [pc, #212]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	2200      	movs	r2, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	617a      	str	r2, [r7, #20]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d82:	f04f 0b00 	mov.w	fp, #0
 8001d86:	4652      	mov	r2, sl
 8001d88:	465b      	mov	r3, fp
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	f04f 0100 	mov.w	r1, #0
 8001d92:	0159      	lsls	r1, r3, #5
 8001d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d98:	0150      	lsls	r0, r2, #5
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	ebb2 080a 	subs.w	r8, r2, sl
 8001da2:	eb63 090b 	sbc.w	r9, r3, fp
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001db2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001db6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dba:	ebb2 0408 	subs.w	r4, r2, r8
 8001dbe:	eb63 0509 	sbc.w	r5, r3, r9
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	00eb      	lsls	r3, r5, #3
 8001dcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd0:	00e2      	lsls	r2, r4, #3
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	461d      	mov	r5, r3
 8001dd6:	eb14 030a 	adds.w	r3, r4, sl
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	eb45 030b 	adc.w	r3, r5, fp
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dee:	4629      	mov	r1, r5
 8001df0:	028b      	lsls	r3, r1, #10
 8001df2:	4621      	mov	r1, r4
 8001df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df8:	4621      	mov	r1, r4
 8001dfa:	028a      	lsls	r2, r1, #10
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e02:	2200      	movs	r2, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	60fa      	str	r2, [r7, #12]
 8001e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e0c:	f7fe fa38 	bl	8000280 <__aeabi_uldivmod>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4613      	mov	r3, r2
 8001e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e18:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001e28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3740      	adds	r7, #64	@ 0x40
 8001e40:	46bd      	mov	sp, r7
 8001e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	017d7840 	.word	0x017d7840

08001e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e58:	4b03      	ldr	r3, [pc, #12]	@ (8001e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0a9b      	lsrs	r3, r3, #10
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	@ (8001e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08004424 	.word	0x08004424

08001e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e98:	f7ff ffdc 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0b5b      	lsrs	r3, r3, #13
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4903      	ldr	r1, [pc, #12]	@ (8001eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	08004424 	.word	0x08004424

08001ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07b      	b.n	8001fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d108      	bne.n	8001ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ede:	d009      	beq.n	8001ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
 8001ee6:	e005      	b.n	8001ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fee0 	bl	8000cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f78:	ea42 0103 	orr.w	r1, r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	f003 0104 	and.w	r1, r3, #4
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	f003 0210 	and.w	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b088      	sub	sp, #32
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fde:	f7ff f861 	bl	80010a4 <HAL_GetTick>
 8001fe2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d001      	beq.n	8001ff8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e12a      	b.n	800224e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_SPI_Transmit+0x36>
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e122      	b.n	800224e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_SPI_Transmit+0x48>
 8002012:	2302      	movs	r3, #2
 8002014:	e11b      	b.n	800224e <HAL_SPI_Transmit+0x280>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2203      	movs	r2, #3
 8002022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	88fa      	ldrh	r2, [r7, #6]
 8002036:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	88fa      	ldrh	r2, [r7, #6]
 800203c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002064:	d10f      	bne.n	8002086 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002074:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002084:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002090:	2b40      	cmp	r3, #64	@ 0x40
 8002092:	d007      	beq.n	80020a4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ac:	d152      	bne.n	8002154 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_SPI_Transmit+0xee>
 80020b6:	8b7b      	ldrh	r3, [r7, #26]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d145      	bne.n	8002148 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	881a      	ldrh	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	1c9a      	adds	r2, r3, #2
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020e0:	e032      	b.n	8002148 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d112      	bne.n	8002116 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	881a      	ldrh	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	1c9a      	adds	r2, r3, #2
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002114:	e018      	b.n	8002148 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002116:	f7fe ffc5 	bl	80010a4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d803      	bhi.n	800212e <HAL_SPI_Transmit+0x160>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d102      	bne.n	8002134 <HAL_SPI_Transmit+0x166>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e082      	b.n	800224e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1c7      	bne.n	80020e2 <HAL_SPI_Transmit+0x114>
 8002152:	e053      	b.n	80021fc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_SPI_Transmit+0x194>
 800215c:	8b7b      	ldrh	r3, [r7, #26]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d147      	bne.n	80021f2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002188:	e033      	b.n	80021f2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	d113      	bne.n	80021c0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	330c      	adds	r3, #12
 80021a2:	7812      	ldrb	r2, [r2, #0]
 80021a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80021be:	e018      	b.n	80021f2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021c0:	f7fe ff70 	bl	80010a4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d803      	bhi.n	80021d8 <HAL_SPI_Transmit+0x20a>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d102      	bne.n	80021de <HAL_SPI_Transmit+0x210>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e02d      	b.n	800224e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1c6      	bne.n	800218a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fbd9 	bl	80029b8 <SPI_EndRxTxTransaction>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800224c:	2300      	movs	r3, #0
  }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b088      	sub	sp, #32
 800225a:	af02      	add	r7, sp, #8
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	4613      	mov	r3, r2
 8002264:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d001      	beq.n	8002276 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002272:	2302      	movs	r3, #2
 8002274:	e104      	b.n	8002480 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_SPI_Receive+0x2c>
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0fc      	b.n	8002480 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800228e:	d112      	bne.n	80022b6 <HAL_SPI_Receive+0x60>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10e      	bne.n	80022b6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2204      	movs	r2, #4
 800229c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022a0:	88fa      	ldrh	r2, [r7, #6]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f8eb 	bl	8002488 <HAL_SPI_TransmitReceive>
 80022b2:	4603      	mov	r3, r0
 80022b4:	e0e4      	b.n	8002480 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022b6:	f7fe fef5 	bl	80010a4 <HAL_GetTick>
 80022ba:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_SPI_Receive+0x74>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e0da      	b.n	8002480 <HAL_SPI_Receive+0x22a>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2204      	movs	r2, #4
 80022d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002318:	d10f      	bne.n	800233a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002344:	2b40      	cmp	r3, #64	@ 0x40
 8002346:	d007      	beq.n	8002358 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002356:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d170      	bne.n	8002442 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002360:	e035      	b.n	80023ce <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d115      	bne.n	800239c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f103 020c 	add.w	r2, r3, #12
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800239a:	e018      	b.n	80023ce <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800239c:	f7fe fe82 	bl	80010a4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d803      	bhi.n	80023b4 <HAL_SPI_Receive+0x15e>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b2:	d102      	bne.n	80023ba <HAL_SPI_Receive+0x164>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e058      	b.n	8002480 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1c4      	bne.n	8002362 <HAL_SPI_Receive+0x10c>
 80023d8:	e038      	b.n	800244c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d113      	bne.n	8002410 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f2:	b292      	uxth	r2, r2
 80023f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	1c9a      	adds	r2, r3, #2
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800240e:	e018      	b.n	8002442 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002410:	f7fe fe48 	bl	80010a4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d803      	bhi.n	8002428 <HAL_SPI_Receive+0x1d2>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d102      	bne.n	800242e <HAL_SPI_Receive+0x1d8>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e01e      	b.n	8002480 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1c6      	bne.n	80023da <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fa4b 	bl	80028ec <SPI_EndRxTransaction>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800247e:	2300      	movs	r3, #0
  }
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002496:	2301      	movs	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800249a:	f7fe fe03 	bl	80010a4 <HAL_GetTick>
 800249e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024b2:	7ffb      	ldrb	r3, [r7, #31]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d00c      	beq.n	80024d2 <HAL_SPI_TransmitReceive+0x4a>
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024be:	d106      	bne.n	80024ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <HAL_SPI_TransmitReceive+0x46>
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d001      	beq.n	80024d2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
 80024d0:	e17f      	b.n	80027d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_SPI_TransmitReceive+0x5c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_SPI_TransmitReceive+0x5c>
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e174      	b.n	80027d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x6e>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e16d      	b.n	80027d2 <HAL_SPI_TransmitReceive+0x34a>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b04      	cmp	r3, #4
 8002508:	d003      	beq.n	8002512 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2205      	movs	r2, #5
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	887a      	ldrh	r2, [r7, #2]
 8002522:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	887a      	ldrh	r2, [r7, #2]
 800253a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002552:	2b40      	cmp	r3, #64	@ 0x40
 8002554:	d007      	beq.n	8002566 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800256e:	d17e      	bne.n	800266e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_SPI_TransmitReceive+0xf6>
 8002578:	8afb      	ldrh	r3, [r7, #22]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d16c      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	881a      	ldrh	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	1c9a      	adds	r2, r3, #2
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a2:	e059      	b.n	8002658 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d11b      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x162>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d016      	beq.n	80025ea <HAL_SPI_TransmitReceive+0x162>
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d113      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	881a      	ldrh	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	1c9a      	adds	r2, r3, #2
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d119      	bne.n	800262c <HAL_SPI_TransmitReceive+0x1a4>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d014      	beq.n	800262c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260c:	b292      	uxth	r2, r2
 800260e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002614:	1c9a      	adds	r2, r3, #2
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002628:	2301      	movs	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800262c:	f7fe fd3a 	bl	80010a4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002638:	429a      	cmp	r2, r3
 800263a:	d80d      	bhi.n	8002658 <HAL_SPI_TransmitReceive+0x1d0>
 800263c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d009      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0bc      	b.n	80027d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1a0      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x11c>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d19b      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x11c>
 800266c:	e082      	b.n	8002774 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_SPI_TransmitReceive+0x1f4>
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d171      	bne.n	8002760 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	330c      	adds	r3, #12
 8002686:	7812      	ldrb	r2, [r2, #0]
 8002688:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a2:	e05d      	b.n	8002760 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d11c      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x264>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d017      	beq.n	80026ec <HAL_SPI_TransmitReceive+0x264>
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d114      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d119      	bne.n	800272e <HAL_SPI_TransmitReceive+0x2a6>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d014      	beq.n	800272e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800272a:	2301      	movs	r3, #1
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800272e:	f7fe fcb9 	bl	80010a4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800273a:	429a      	cmp	r2, r3
 800273c:	d803      	bhi.n	8002746 <HAL_SPI_TransmitReceive+0x2be>
 800273e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d102      	bne.n	800274c <HAL_SPI_TransmitReceive+0x2c4>
 8002746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e038      	b.n	80027d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d19c      	bne.n	80026a4 <HAL_SPI_TransmitReceive+0x21c>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d197      	bne.n	80026a4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002774:	6a3a      	ldr	r2, [r7, #32]
 8002776:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f91d 	bl	80029b8 <SPI_EndRxTxTransaction>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e01d      	b.n	80027d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3728      	adds	r7, #40	@ 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027ec:	f7fe fc5a 	bl	80010a4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	4413      	add	r3, r2
 80027fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027fc:	f7fe fc52 	bl	80010a4 <HAL_GetTick>
 8002800:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002802:	4b39      	ldr	r3, [pc, #228]	@ (80028e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	015b      	lsls	r3, r3, #5
 8002808:	0d1b      	lsrs	r3, r3, #20
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	fb02 f303 	mul.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002812:	e055      	b.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d051      	beq.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800281c:	f7fe fc42 	bl	80010a4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	429a      	cmp	r2, r3
 800282a:	d902      	bls.n	8002832 <SPI_WaitFlagStateUntilTimeout+0x56>
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d13d      	bne.n	80028ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800284a:	d111      	bne.n	8002870 <SPI_WaitFlagStateUntilTimeout+0x94>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002854:	d004      	beq.n	8002860 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800285e:	d107      	bne.n	8002870 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800286e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002878:	d10f      	bne.n	800289a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e018      	b.n	80028e0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	e002      	b.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3b01      	subs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4013      	ands	r3, r2
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d19a      	bne.n	8002814 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000000 	.word	0x20000000

080028ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002900:	d111      	bne.n	8002926 <SPI_EndRxTransaction+0x3a>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800290a:	d004      	beq.n	8002916 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002914:	d107      	bne.n	8002926 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800292e:	d12a      	bne.n	8002986 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002938:	d012      	beq.n	8002960 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2200      	movs	r2, #0
 8002942:	2180      	movs	r1, #128	@ 0x80
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff ff49 	bl	80027dc <SPI_WaitFlagStateUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02d      	beq.n	80029ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e026      	b.n	80029ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2200      	movs	r2, #0
 8002968:	2101      	movs	r1, #1
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff ff36 	bl	80027dc <SPI_WaitFlagStateUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01a      	beq.n	80029ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e013      	b.n	80029ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2200      	movs	r2, #0
 800298e:	2101      	movs	r1, #1
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff ff23 	bl	80027dc <SPI_WaitFlagStateUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e000      	b.n	80029ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2201      	movs	r2, #1
 80029cc:	2102      	movs	r1, #2
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff ff04 	bl	80027dc <SPI_WaitFlagStateUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e032      	b.n	8002a50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <SPI_EndRxTxTransaction+0xa0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <SPI_EndRxTxTransaction+0xa4>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	0d5b      	lsrs	r3, r3, #21
 80029f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a08:	d112      	bne.n	8002a30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff fee1 	bl	80027dc <SPI_WaitFlagStateUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d016      	beq.n	8002a4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e00f      	b.n	8002a50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a46:	2b80      	cmp	r3, #128	@ 0x80
 8002a48:	d0f2      	beq.n	8002a30 <SPI_EndRxTxTransaction+0x78>
 8002a4a:	e000      	b.n	8002a4e <SPI_EndRxTxTransaction+0x96>
        break;
 8002a4c:	bf00      	nop
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	165e9f81 	.word	0x165e9f81

08002a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e042      	b.n	8002af8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe f96c 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	@ 0x24
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f973 	bl	8002d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	@ 0x28
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d175      	bne.n	8002c0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_UART_Transmit+0x2c>
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e06e      	b.n	8002c0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2221      	movs	r2, #33	@ 0x21
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe fab1 	bl	80010a4 <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	88fa      	ldrh	r2, [r7, #6]
 8002b4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b58:	d108      	bne.n	8002b6c <HAL_UART_Transmit+0x6c>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e003      	b.n	8002b74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b74:	e02e      	b.n	8002bd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2180      	movs	r1, #128	@ 0x80
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f848 	bl	8002c16 <UART_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e03a      	b.n	8002c0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	e007      	b.n	8002bc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1cb      	bne.n	8002b76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2200      	movs	r2, #0
 8002be6:	2140      	movs	r1, #64	@ 0x40
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f814 	bl	8002c16 <UART_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e006      	b.n	8002c0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	4613      	mov	r3, r2
 8002c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c26:	e03b      	b.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	d037      	beq.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c30:	f7fe fa38 	bl	80010a4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	6a3a      	ldr	r2, [r7, #32]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d302      	bcc.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e03a      	b.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d023      	beq.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b80      	cmp	r3, #128	@ 0x80
 8002c5c:	d020      	beq.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b40      	cmp	r3, #64	@ 0x40
 8002c62:	d01d      	beq.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d116      	bne.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f81d 	bl	8002cc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2208      	movs	r2, #8
 8002c92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e00f      	b.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d0b4      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b095      	sub	sp, #84	@ 0x54
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cda:	e853 3f00 	ldrex	r3, [r3]
 8002cde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cf0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cf8:	e841 2300 	strex	r3, r2, [r1]
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e5      	bne.n	8002cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3314      	adds	r3, #20
 8002d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3314      	adds	r3, #20
 8002d22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e5      	bne.n	8002d04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d119      	bne.n	8002d74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f023 0310 	bic.w	r3, r3, #16
 8002d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d60:	61ba      	str	r2, [r7, #24]
 8002d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d64:	6979      	ldr	r1, [r7, #20]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	e841 2300 	strex	r3, r2, [r1]
 8002d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e5      	bne.n	8002d40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d82:	bf00      	nop
 8002d84:	3754      	adds	r7, #84	@ 0x54
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b0c0      	sub	sp, #256	@ 0x100
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dac:	68d9      	ldr	r1, [r3, #12]
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	ea40 0301 	orr.w	r3, r0, r1
 8002db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002de8:	f021 010c 	bic.w	r1, r1, #12
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002df6:	430b      	orrs	r3, r1
 8002df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0a:	6999      	ldr	r1, [r3, #24]
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	ea40 0301 	orr.w	r3, r0, r1
 8002e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800305c <UART_SetConfig+0x2cc>)
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d005      	beq.n	8002e30 <UART_SetConfig+0xa0>
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8003060 <UART_SetConfig+0x2d0>)
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d104      	bne.n	8002e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e30:	f7ff f830 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8002e34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e38:	e003      	b.n	8002e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e3a:	f7ff f817 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8002e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e4c:	f040 810c 	bne.w	8003068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e62:	4622      	mov	r2, r4
 8002e64:	462b      	mov	r3, r5
 8002e66:	1891      	adds	r1, r2, r2
 8002e68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e6a:	415b      	adcs	r3, r3
 8002e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e72:	4621      	mov	r1, r4
 8002e74:	eb12 0801 	adds.w	r8, r2, r1
 8002e78:	4629      	mov	r1, r5
 8002e7a:	eb43 0901 	adc.w	r9, r3, r1
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e92:	4690      	mov	r8, r2
 8002e94:	4699      	mov	r9, r3
 8002e96:	4623      	mov	r3, r4
 8002e98:	eb18 0303 	adds.w	r3, r8, r3
 8002e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	eb49 0303 	adc.w	r3, r9, r3
 8002ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	18db      	adds	r3, r3, r3
 8002ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	eb42 0303 	adc.w	r3, r2, r3
 8002eca:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ed4:	f7fd f9d4 	bl	8000280 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4b61      	ldr	r3, [pc, #388]	@ (8003064 <UART_SetConfig+0x2d4>)
 8002ede:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	011c      	lsls	r4, r3, #4
 8002ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ef8:	4642      	mov	r2, r8
 8002efa:	464b      	mov	r3, r9
 8002efc:	1891      	adds	r1, r2, r2
 8002efe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f00:	415b      	adcs	r3, r3
 8002f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f08:	4641      	mov	r1, r8
 8002f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f0e:	4649      	mov	r1, r9
 8002f10:	eb43 0b01 	adc.w	fp, r3, r1
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f28:	4692      	mov	sl, r2
 8002f2a:	469b      	mov	fp, r3
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f36:	464b      	mov	r3, r9
 8002f38:	eb4b 0303 	adc.w	r3, fp, r3
 8002f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f54:	460b      	mov	r3, r1
 8002f56:	18db      	adds	r3, r3, r3
 8002f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	eb42 0303 	adc.w	r3, r2, r3
 8002f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f6a:	f7fd f989 	bl	8000280 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <UART_SetConfig+0x2d4>)
 8002f76:	fba3 2301 	umull	r2, r3, r3, r1
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2264      	movs	r2, #100	@ 0x64
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	1acb      	subs	r3, r1, r3
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f8a:	4b36      	ldr	r3, [pc, #216]	@ (8003064 <UART_SetConfig+0x2d4>)
 8002f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f98:	441c      	add	r4, r3
 8002f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002fac:	4642      	mov	r2, r8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	1891      	adds	r1, r2, r2
 8002fb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fb4:	415b      	adcs	r3, r3
 8002fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	1851      	adds	r1, r2, r1
 8002fc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	414b      	adcs	r3, r1
 8002fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	00cb      	lsls	r3, r1, #3
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fde:	4651      	mov	r1, sl
 8002fe0:	00ca      	lsls	r2, r1, #3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4642      	mov	r2, r8
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ff0:	464b      	mov	r3, r9
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003008:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800300c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003010:	460b      	mov	r3, r1
 8003012:	18db      	adds	r3, r3, r3
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003016:	4613      	mov	r3, r2
 8003018:	eb42 0303 	adc.w	r3, r2, r3
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800301e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003026:	f7fd f92b 	bl	8000280 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4b0d      	ldr	r3, [pc, #52]	@ (8003064 <UART_SetConfig+0x2d4>)
 8003030:	fba3 1302 	umull	r1, r3, r3, r2
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	2164      	movs	r1, #100	@ 0x64
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	3332      	adds	r3, #50	@ 0x32
 8003042:	4a08      	ldr	r2, [pc, #32]	@ (8003064 <UART_SetConfig+0x2d4>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	f003 0207 	and.w	r2, r3, #7
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4422      	add	r2, r4
 8003056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003058:	e106      	b.n	8003268 <UART_SetConfig+0x4d8>
 800305a:	bf00      	nop
 800305c:	40011000 	.word	0x40011000
 8003060:	40011400 	.word	0x40011400
 8003064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800306c:	2200      	movs	r2, #0
 800306e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800307a:	4642      	mov	r2, r8
 800307c:	464b      	mov	r3, r9
 800307e:	1891      	adds	r1, r2, r2
 8003080:	6239      	str	r1, [r7, #32]
 8003082:	415b      	adcs	r3, r3
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
 8003086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800308a:	4641      	mov	r1, r8
 800308c:	1854      	adds	r4, r2, r1
 800308e:	4649      	mov	r1, r9
 8003090:	eb43 0501 	adc.w	r5, r3, r1
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	00eb      	lsls	r3, r5, #3
 800309e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a2:	00e2      	lsls	r2, r4, #3
 80030a4:	4614      	mov	r4, r2
 80030a6:	461d      	mov	r5, r3
 80030a8:	4643      	mov	r3, r8
 80030aa:	18e3      	adds	r3, r4, r3
 80030ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030b0:	464b      	mov	r3, r9
 80030b2:	eb45 0303 	adc.w	r3, r5, r3
 80030b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030d6:	4629      	mov	r1, r5
 80030d8:	008b      	lsls	r3, r1, #2
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030e0:	4621      	mov	r1, r4
 80030e2:	008a      	lsls	r2, r1, #2
 80030e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030e8:	f7fd f8ca 	bl	8000280 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4b60      	ldr	r3, [pc, #384]	@ (8003274 <UART_SetConfig+0x4e4>)
 80030f2:	fba3 2302 	umull	r2, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	011c      	lsls	r4, r3, #4
 80030fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003104:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800310c:	4642      	mov	r2, r8
 800310e:	464b      	mov	r3, r9
 8003110:	1891      	adds	r1, r2, r2
 8003112:	61b9      	str	r1, [r7, #24]
 8003114:	415b      	adcs	r3, r3
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800311c:	4641      	mov	r1, r8
 800311e:	1851      	adds	r1, r2, r1
 8003120:	6139      	str	r1, [r7, #16]
 8003122:	4649      	mov	r1, r9
 8003124:	414b      	adcs	r3, r1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003134:	4659      	mov	r1, fp
 8003136:	00cb      	lsls	r3, r1, #3
 8003138:	4651      	mov	r1, sl
 800313a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800313e:	4651      	mov	r1, sl
 8003140:	00ca      	lsls	r2, r1, #3
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	4603      	mov	r3, r0
 8003148:	4642      	mov	r2, r8
 800314a:	189b      	adds	r3, r3, r2
 800314c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003150:	464b      	mov	r3, r9
 8003152:	460a      	mov	r2, r1
 8003154:	eb42 0303 	adc.w	r3, r2, r3
 8003158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003166:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003174:	4649      	mov	r1, r9
 8003176:	008b      	lsls	r3, r1, #2
 8003178:	4641      	mov	r1, r8
 800317a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800317e:	4641      	mov	r1, r8
 8003180:	008a      	lsls	r2, r1, #2
 8003182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003186:	f7fd f87b 	bl	8000280 <__aeabi_uldivmod>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4611      	mov	r1, r2
 8003190:	4b38      	ldr	r3, [pc, #224]	@ (8003274 <UART_SetConfig+0x4e4>)
 8003192:	fba3 2301 	umull	r2, r3, r3, r1
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2264      	movs	r2, #100	@ 0x64
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	1acb      	subs	r3, r1, r3
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	3332      	adds	r3, #50	@ 0x32
 80031a4:	4a33      	ldr	r2, [pc, #204]	@ (8003274 <UART_SetConfig+0x4e4>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031b0:	441c      	add	r4, r3
 80031b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b6:	2200      	movs	r2, #0
 80031b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80031ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80031bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	1891      	adds	r1, r2, r2
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	415b      	adcs	r3, r3
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031d0:	4641      	mov	r1, r8
 80031d2:	1851      	adds	r1, r2, r1
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	4649      	mov	r1, r9
 80031d8:	414b      	adcs	r3, r1
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031e8:	4659      	mov	r1, fp
 80031ea:	00cb      	lsls	r3, r1, #3
 80031ec:	4651      	mov	r1, sl
 80031ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f2:	4651      	mov	r1, sl
 80031f4:	00ca      	lsls	r2, r1, #3
 80031f6:	4610      	mov	r0, r2
 80031f8:	4619      	mov	r1, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	4642      	mov	r2, r8
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003202:	464b      	mov	r3, r9
 8003204:	460a      	mov	r2, r1
 8003206:	eb42 0303 	adc.w	r3, r2, r3
 800320a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	663b      	str	r3, [r7, #96]	@ 0x60
 8003216:	667a      	str	r2, [r7, #100]	@ 0x64
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003224:	4649      	mov	r1, r9
 8003226:	008b      	lsls	r3, r1, #2
 8003228:	4641      	mov	r1, r8
 800322a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322e:	4641      	mov	r1, r8
 8003230:	008a      	lsls	r2, r1, #2
 8003232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003236:	f7fd f823 	bl	8000280 <__aeabi_uldivmod>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <UART_SetConfig+0x4e4>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	2164      	movs	r1, #100	@ 0x64
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	3332      	adds	r3, #50	@ 0x32
 8003252:	4a08      	ldr	r2, [pc, #32]	@ (8003274 <UART_SetConfig+0x4e4>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4422      	add	r2, r4
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800326e:	46bd      	mov	sp, r7
 8003270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003274:	51eb851f 	.word	0x51eb851f

08003278 <std>:
 8003278:	2300      	movs	r3, #0
 800327a:	b510      	push	{r4, lr}
 800327c:	4604      	mov	r4, r0
 800327e:	e9c0 3300 	strd	r3, r3, [r0]
 8003282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003286:	6083      	str	r3, [r0, #8]
 8003288:	8181      	strh	r1, [r0, #12]
 800328a:	6643      	str	r3, [r0, #100]	@ 0x64
 800328c:	81c2      	strh	r2, [r0, #14]
 800328e:	6183      	str	r3, [r0, #24]
 8003290:	4619      	mov	r1, r3
 8003292:	2208      	movs	r2, #8
 8003294:	305c      	adds	r0, #92	@ 0x5c
 8003296:	f000 f9f9 	bl	800368c <memset>
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <std+0x58>)
 800329c:	6263      	str	r3, [r4, #36]	@ 0x24
 800329e:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <std+0x5c>)
 80032a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032a2:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <std+0x60>)
 80032a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80032a6:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <std+0x64>)
 80032a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80032aa:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <std+0x68>)
 80032ac:	6224      	str	r4, [r4, #32]
 80032ae:	429c      	cmp	r4, r3
 80032b0:	d006      	beq.n	80032c0 <std+0x48>
 80032b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032b6:	4294      	cmp	r4, r2
 80032b8:	d002      	beq.n	80032c0 <std+0x48>
 80032ba:	33d0      	adds	r3, #208	@ 0xd0
 80032bc:	429c      	cmp	r4, r3
 80032be:	d105      	bne.n	80032cc <std+0x54>
 80032c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c8:	f000 ba58 	b.w	800377c <__retarget_lock_init_recursive>
 80032cc:	bd10      	pop	{r4, pc}
 80032ce:	bf00      	nop
 80032d0:	080034dd 	.word	0x080034dd
 80032d4:	080034ff 	.word	0x080034ff
 80032d8:	08003537 	.word	0x08003537
 80032dc:	0800355b 	.word	0x0800355b
 80032e0:	2000012c 	.word	0x2000012c

080032e4 <stdio_exit_handler>:
 80032e4:	4a02      	ldr	r2, [pc, #8]	@ (80032f0 <stdio_exit_handler+0xc>)
 80032e6:	4903      	ldr	r1, [pc, #12]	@ (80032f4 <stdio_exit_handler+0x10>)
 80032e8:	4803      	ldr	r0, [pc, #12]	@ (80032f8 <stdio_exit_handler+0x14>)
 80032ea:	f000 b869 	b.w	80033c0 <_fwalk_sglue>
 80032ee:	bf00      	nop
 80032f0:	2000000c 	.word	0x2000000c
 80032f4:	08004019 	.word	0x08004019
 80032f8:	2000001c 	.word	0x2000001c

080032fc <cleanup_stdio>:
 80032fc:	6841      	ldr	r1, [r0, #4]
 80032fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <cleanup_stdio+0x34>)
 8003300:	4299      	cmp	r1, r3
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	d001      	beq.n	800330c <cleanup_stdio+0x10>
 8003308:	f000 fe86 	bl	8004018 <_fflush_r>
 800330c:	68a1      	ldr	r1, [r4, #8]
 800330e:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <cleanup_stdio+0x38>)
 8003310:	4299      	cmp	r1, r3
 8003312:	d002      	beq.n	800331a <cleanup_stdio+0x1e>
 8003314:	4620      	mov	r0, r4
 8003316:	f000 fe7f 	bl	8004018 <_fflush_r>
 800331a:	68e1      	ldr	r1, [r4, #12]
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <cleanup_stdio+0x3c>)
 800331e:	4299      	cmp	r1, r3
 8003320:	d004      	beq.n	800332c <cleanup_stdio+0x30>
 8003322:	4620      	mov	r0, r4
 8003324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003328:	f000 be76 	b.w	8004018 <_fflush_r>
 800332c:	bd10      	pop	{r4, pc}
 800332e:	bf00      	nop
 8003330:	2000012c 	.word	0x2000012c
 8003334:	20000194 	.word	0x20000194
 8003338:	200001fc 	.word	0x200001fc

0800333c <global_stdio_init.part.0>:
 800333c:	b510      	push	{r4, lr}
 800333e:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <global_stdio_init.part.0+0x30>)
 8003340:	4c0b      	ldr	r4, [pc, #44]	@ (8003370 <global_stdio_init.part.0+0x34>)
 8003342:	4a0c      	ldr	r2, [pc, #48]	@ (8003374 <global_stdio_init.part.0+0x38>)
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	4620      	mov	r0, r4
 8003348:	2200      	movs	r2, #0
 800334a:	2104      	movs	r1, #4
 800334c:	f7ff ff94 	bl	8003278 <std>
 8003350:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003354:	2201      	movs	r2, #1
 8003356:	2109      	movs	r1, #9
 8003358:	f7ff ff8e 	bl	8003278 <std>
 800335c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003360:	2202      	movs	r2, #2
 8003362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003366:	2112      	movs	r1, #18
 8003368:	f7ff bf86 	b.w	8003278 <std>
 800336c:	20000264 	.word	0x20000264
 8003370:	2000012c 	.word	0x2000012c
 8003374:	080032e5 	.word	0x080032e5

08003378 <__sfp_lock_acquire>:
 8003378:	4801      	ldr	r0, [pc, #4]	@ (8003380 <__sfp_lock_acquire+0x8>)
 800337a:	f000 ba00 	b.w	800377e <__retarget_lock_acquire_recursive>
 800337e:	bf00      	nop
 8003380:	2000026d 	.word	0x2000026d

08003384 <__sfp_lock_release>:
 8003384:	4801      	ldr	r0, [pc, #4]	@ (800338c <__sfp_lock_release+0x8>)
 8003386:	f000 b9fb 	b.w	8003780 <__retarget_lock_release_recursive>
 800338a:	bf00      	nop
 800338c:	2000026d 	.word	0x2000026d

08003390 <__sinit>:
 8003390:	b510      	push	{r4, lr}
 8003392:	4604      	mov	r4, r0
 8003394:	f7ff fff0 	bl	8003378 <__sfp_lock_acquire>
 8003398:	6a23      	ldr	r3, [r4, #32]
 800339a:	b11b      	cbz	r3, 80033a4 <__sinit+0x14>
 800339c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a0:	f7ff bff0 	b.w	8003384 <__sfp_lock_release>
 80033a4:	4b04      	ldr	r3, [pc, #16]	@ (80033b8 <__sinit+0x28>)
 80033a6:	6223      	str	r3, [r4, #32]
 80033a8:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <__sinit+0x2c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f5      	bne.n	800339c <__sinit+0xc>
 80033b0:	f7ff ffc4 	bl	800333c <global_stdio_init.part.0>
 80033b4:	e7f2      	b.n	800339c <__sinit+0xc>
 80033b6:	bf00      	nop
 80033b8:	080032fd 	.word	0x080032fd
 80033bc:	20000264 	.word	0x20000264

080033c0 <_fwalk_sglue>:
 80033c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c4:	4607      	mov	r7, r0
 80033c6:	4688      	mov	r8, r1
 80033c8:	4614      	mov	r4, r2
 80033ca:	2600      	movs	r6, #0
 80033cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033d0:	f1b9 0901 	subs.w	r9, r9, #1
 80033d4:	d505      	bpl.n	80033e2 <_fwalk_sglue+0x22>
 80033d6:	6824      	ldr	r4, [r4, #0]
 80033d8:	2c00      	cmp	r4, #0
 80033da:	d1f7      	bne.n	80033cc <_fwalk_sglue+0xc>
 80033dc:	4630      	mov	r0, r6
 80033de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033e2:	89ab      	ldrh	r3, [r5, #12]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d907      	bls.n	80033f8 <_fwalk_sglue+0x38>
 80033e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033ec:	3301      	adds	r3, #1
 80033ee:	d003      	beq.n	80033f8 <_fwalk_sglue+0x38>
 80033f0:	4629      	mov	r1, r5
 80033f2:	4638      	mov	r0, r7
 80033f4:	47c0      	blx	r8
 80033f6:	4306      	orrs	r6, r0
 80033f8:	3568      	adds	r5, #104	@ 0x68
 80033fa:	e7e9      	b.n	80033d0 <_fwalk_sglue+0x10>

080033fc <iprintf>:
 80033fc:	b40f      	push	{r0, r1, r2, r3}
 80033fe:	b507      	push	{r0, r1, r2, lr}
 8003400:	4906      	ldr	r1, [pc, #24]	@ (800341c <iprintf+0x20>)
 8003402:	ab04      	add	r3, sp, #16
 8003404:	6808      	ldr	r0, [r1, #0]
 8003406:	f853 2b04 	ldr.w	r2, [r3], #4
 800340a:	6881      	ldr	r1, [r0, #8]
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	f000 fadb 	bl	80039c8 <_vfiprintf_r>
 8003412:	b003      	add	sp, #12
 8003414:	f85d eb04 	ldr.w	lr, [sp], #4
 8003418:	b004      	add	sp, #16
 800341a:	4770      	bx	lr
 800341c:	20000018 	.word	0x20000018

08003420 <_puts_r>:
 8003420:	6a03      	ldr	r3, [r0, #32]
 8003422:	b570      	push	{r4, r5, r6, lr}
 8003424:	6884      	ldr	r4, [r0, #8]
 8003426:	4605      	mov	r5, r0
 8003428:	460e      	mov	r6, r1
 800342a:	b90b      	cbnz	r3, 8003430 <_puts_r+0x10>
 800342c:	f7ff ffb0 	bl	8003390 <__sinit>
 8003430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003432:	07db      	lsls	r3, r3, #31
 8003434:	d405      	bmi.n	8003442 <_puts_r+0x22>
 8003436:	89a3      	ldrh	r3, [r4, #12]
 8003438:	0598      	lsls	r0, r3, #22
 800343a:	d402      	bmi.n	8003442 <_puts_r+0x22>
 800343c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800343e:	f000 f99e 	bl	800377e <__retarget_lock_acquire_recursive>
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	0719      	lsls	r1, r3, #28
 8003446:	d502      	bpl.n	800344e <_puts_r+0x2e>
 8003448:	6923      	ldr	r3, [r4, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d135      	bne.n	80034ba <_puts_r+0x9a>
 800344e:	4621      	mov	r1, r4
 8003450:	4628      	mov	r0, r5
 8003452:	f000 f8c5 	bl	80035e0 <__swsetup_r>
 8003456:	b380      	cbz	r0, 80034ba <_puts_r+0x9a>
 8003458:	f04f 35ff 	mov.w	r5, #4294967295
 800345c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800345e:	07da      	lsls	r2, r3, #31
 8003460:	d405      	bmi.n	800346e <_puts_r+0x4e>
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	059b      	lsls	r3, r3, #22
 8003466:	d402      	bmi.n	800346e <_puts_r+0x4e>
 8003468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800346a:	f000 f989 	bl	8003780 <__retarget_lock_release_recursive>
 800346e:	4628      	mov	r0, r5
 8003470:	bd70      	pop	{r4, r5, r6, pc}
 8003472:	2b00      	cmp	r3, #0
 8003474:	da04      	bge.n	8003480 <_puts_r+0x60>
 8003476:	69a2      	ldr	r2, [r4, #24]
 8003478:	429a      	cmp	r2, r3
 800347a:	dc17      	bgt.n	80034ac <_puts_r+0x8c>
 800347c:	290a      	cmp	r1, #10
 800347e:	d015      	beq.n	80034ac <_puts_r+0x8c>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	6022      	str	r2, [r4, #0]
 8003486:	7019      	strb	r1, [r3, #0]
 8003488:	68a3      	ldr	r3, [r4, #8]
 800348a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800348e:	3b01      	subs	r3, #1
 8003490:	60a3      	str	r3, [r4, #8]
 8003492:	2900      	cmp	r1, #0
 8003494:	d1ed      	bne.n	8003472 <_puts_r+0x52>
 8003496:	2b00      	cmp	r3, #0
 8003498:	da11      	bge.n	80034be <_puts_r+0x9e>
 800349a:	4622      	mov	r2, r4
 800349c:	210a      	movs	r1, #10
 800349e:	4628      	mov	r0, r5
 80034a0:	f000 f85f 	bl	8003562 <__swbuf_r>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d0d7      	beq.n	8003458 <_puts_r+0x38>
 80034a8:	250a      	movs	r5, #10
 80034aa:	e7d7      	b.n	800345c <_puts_r+0x3c>
 80034ac:	4622      	mov	r2, r4
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 f857 	bl	8003562 <__swbuf_r>
 80034b4:	3001      	adds	r0, #1
 80034b6:	d1e7      	bne.n	8003488 <_puts_r+0x68>
 80034b8:	e7ce      	b.n	8003458 <_puts_r+0x38>
 80034ba:	3e01      	subs	r6, #1
 80034bc:	e7e4      	b.n	8003488 <_puts_r+0x68>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	6022      	str	r2, [r4, #0]
 80034c4:	220a      	movs	r2, #10
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e7ee      	b.n	80034a8 <_puts_r+0x88>
	...

080034cc <puts>:
 80034cc:	4b02      	ldr	r3, [pc, #8]	@ (80034d8 <puts+0xc>)
 80034ce:	4601      	mov	r1, r0
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	f7ff bfa5 	b.w	8003420 <_puts_r>
 80034d6:	bf00      	nop
 80034d8:	20000018 	.word	0x20000018

080034dc <__sread>:
 80034dc:	b510      	push	{r4, lr}
 80034de:	460c      	mov	r4, r1
 80034e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e4:	f000 f8fc 	bl	80036e0 <_read_r>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	bfab      	itete	ge
 80034ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80034ee:	89a3      	ldrhlt	r3, [r4, #12]
 80034f0:	181b      	addge	r3, r3, r0
 80034f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80034f6:	bfac      	ite	ge
 80034f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80034fa:	81a3      	strhlt	r3, [r4, #12]
 80034fc:	bd10      	pop	{r4, pc}

080034fe <__swrite>:
 80034fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003502:	461f      	mov	r7, r3
 8003504:	898b      	ldrh	r3, [r1, #12]
 8003506:	05db      	lsls	r3, r3, #23
 8003508:	4605      	mov	r5, r0
 800350a:	460c      	mov	r4, r1
 800350c:	4616      	mov	r6, r2
 800350e:	d505      	bpl.n	800351c <__swrite+0x1e>
 8003510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003514:	2302      	movs	r3, #2
 8003516:	2200      	movs	r2, #0
 8003518:	f000 f8d0 	bl	80036bc <_lseek_r>
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003526:	81a3      	strh	r3, [r4, #12]
 8003528:	4632      	mov	r2, r6
 800352a:	463b      	mov	r3, r7
 800352c:	4628      	mov	r0, r5
 800352e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003532:	f000 b8e7 	b.w	8003704 <_write_r>

08003536 <__sseek>:
 8003536:	b510      	push	{r4, lr}
 8003538:	460c      	mov	r4, r1
 800353a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800353e:	f000 f8bd 	bl	80036bc <_lseek_r>
 8003542:	1c43      	adds	r3, r0, #1
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	bf15      	itete	ne
 8003548:	6560      	strne	r0, [r4, #84]	@ 0x54
 800354a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800354e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003552:	81a3      	strheq	r3, [r4, #12]
 8003554:	bf18      	it	ne
 8003556:	81a3      	strhne	r3, [r4, #12]
 8003558:	bd10      	pop	{r4, pc}

0800355a <__sclose>:
 800355a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800355e:	f000 b89d 	b.w	800369c <_close_r>

08003562 <__swbuf_r>:
 8003562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003564:	460e      	mov	r6, r1
 8003566:	4614      	mov	r4, r2
 8003568:	4605      	mov	r5, r0
 800356a:	b118      	cbz	r0, 8003574 <__swbuf_r+0x12>
 800356c:	6a03      	ldr	r3, [r0, #32]
 800356e:	b90b      	cbnz	r3, 8003574 <__swbuf_r+0x12>
 8003570:	f7ff ff0e 	bl	8003390 <__sinit>
 8003574:	69a3      	ldr	r3, [r4, #24]
 8003576:	60a3      	str	r3, [r4, #8]
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	071a      	lsls	r2, r3, #28
 800357c:	d501      	bpl.n	8003582 <__swbuf_r+0x20>
 800357e:	6923      	ldr	r3, [r4, #16]
 8003580:	b943      	cbnz	r3, 8003594 <__swbuf_r+0x32>
 8003582:	4621      	mov	r1, r4
 8003584:	4628      	mov	r0, r5
 8003586:	f000 f82b 	bl	80035e0 <__swsetup_r>
 800358a:	b118      	cbz	r0, 8003594 <__swbuf_r+0x32>
 800358c:	f04f 37ff 	mov.w	r7, #4294967295
 8003590:	4638      	mov	r0, r7
 8003592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	6922      	ldr	r2, [r4, #16]
 8003598:	1a98      	subs	r0, r3, r2
 800359a:	6963      	ldr	r3, [r4, #20]
 800359c:	b2f6      	uxtb	r6, r6
 800359e:	4283      	cmp	r3, r0
 80035a0:	4637      	mov	r7, r6
 80035a2:	dc05      	bgt.n	80035b0 <__swbuf_r+0x4e>
 80035a4:	4621      	mov	r1, r4
 80035a6:	4628      	mov	r0, r5
 80035a8:	f000 fd36 	bl	8004018 <_fflush_r>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d1ed      	bne.n	800358c <__swbuf_r+0x2a>
 80035b0:	68a3      	ldr	r3, [r4, #8]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	60a3      	str	r3, [r4, #8]
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	6022      	str	r2, [r4, #0]
 80035bc:	701e      	strb	r6, [r3, #0]
 80035be:	6962      	ldr	r2, [r4, #20]
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d004      	beq.n	80035d0 <__swbuf_r+0x6e>
 80035c6:	89a3      	ldrh	r3, [r4, #12]
 80035c8:	07db      	lsls	r3, r3, #31
 80035ca:	d5e1      	bpl.n	8003590 <__swbuf_r+0x2e>
 80035cc:	2e0a      	cmp	r6, #10
 80035ce:	d1df      	bne.n	8003590 <__swbuf_r+0x2e>
 80035d0:	4621      	mov	r1, r4
 80035d2:	4628      	mov	r0, r5
 80035d4:	f000 fd20 	bl	8004018 <_fflush_r>
 80035d8:	2800      	cmp	r0, #0
 80035da:	d0d9      	beq.n	8003590 <__swbuf_r+0x2e>
 80035dc:	e7d6      	b.n	800358c <__swbuf_r+0x2a>
	...

080035e0 <__swsetup_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4b29      	ldr	r3, [pc, #164]	@ (8003688 <__swsetup_r+0xa8>)
 80035e4:	4605      	mov	r5, r0
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	460c      	mov	r4, r1
 80035ea:	b118      	cbz	r0, 80035f4 <__swsetup_r+0x14>
 80035ec:	6a03      	ldr	r3, [r0, #32]
 80035ee:	b90b      	cbnz	r3, 80035f4 <__swsetup_r+0x14>
 80035f0:	f7ff fece 	bl	8003390 <__sinit>
 80035f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f8:	0719      	lsls	r1, r3, #28
 80035fa:	d422      	bmi.n	8003642 <__swsetup_r+0x62>
 80035fc:	06da      	lsls	r2, r3, #27
 80035fe:	d407      	bmi.n	8003610 <__swsetup_r+0x30>
 8003600:	2209      	movs	r2, #9
 8003602:	602a      	str	r2, [r5, #0]
 8003604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003608:	81a3      	strh	r3, [r4, #12]
 800360a:	f04f 30ff 	mov.w	r0, #4294967295
 800360e:	e033      	b.n	8003678 <__swsetup_r+0x98>
 8003610:	0758      	lsls	r0, r3, #29
 8003612:	d512      	bpl.n	800363a <__swsetup_r+0x5a>
 8003614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003616:	b141      	cbz	r1, 800362a <__swsetup_r+0x4a>
 8003618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800361c:	4299      	cmp	r1, r3
 800361e:	d002      	beq.n	8003626 <__swsetup_r+0x46>
 8003620:	4628      	mov	r0, r5
 8003622:	f000 f8af 	bl	8003784 <_free_r>
 8003626:	2300      	movs	r3, #0
 8003628:	6363      	str	r3, [r4, #52]	@ 0x34
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	2300      	movs	r3, #0
 8003634:	6063      	str	r3, [r4, #4]
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	b94b      	cbnz	r3, 800365a <__swsetup_r+0x7a>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800364c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003650:	d003      	beq.n	800365a <__swsetup_r+0x7a>
 8003652:	4621      	mov	r1, r4
 8003654:	4628      	mov	r0, r5
 8003656:	f000 fd2d 	bl	80040b4 <__smakebuf_r>
 800365a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800365e:	f013 0201 	ands.w	r2, r3, #1
 8003662:	d00a      	beq.n	800367a <__swsetup_r+0x9a>
 8003664:	2200      	movs	r2, #0
 8003666:	60a2      	str	r2, [r4, #8]
 8003668:	6962      	ldr	r2, [r4, #20]
 800366a:	4252      	negs	r2, r2
 800366c:	61a2      	str	r2, [r4, #24]
 800366e:	6922      	ldr	r2, [r4, #16]
 8003670:	b942      	cbnz	r2, 8003684 <__swsetup_r+0xa4>
 8003672:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003676:	d1c5      	bne.n	8003604 <__swsetup_r+0x24>
 8003678:	bd38      	pop	{r3, r4, r5, pc}
 800367a:	0799      	lsls	r1, r3, #30
 800367c:	bf58      	it	pl
 800367e:	6962      	ldrpl	r2, [r4, #20]
 8003680:	60a2      	str	r2, [r4, #8]
 8003682:	e7f4      	b.n	800366e <__swsetup_r+0x8e>
 8003684:	2000      	movs	r0, #0
 8003686:	e7f7      	b.n	8003678 <__swsetup_r+0x98>
 8003688:	20000018 	.word	0x20000018

0800368c <memset>:
 800368c:	4402      	add	r2, r0
 800368e:	4603      	mov	r3, r0
 8003690:	4293      	cmp	r3, r2
 8003692:	d100      	bne.n	8003696 <memset+0xa>
 8003694:	4770      	bx	lr
 8003696:	f803 1b01 	strb.w	r1, [r3], #1
 800369a:	e7f9      	b.n	8003690 <memset+0x4>

0800369c <_close_r>:
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	4d06      	ldr	r5, [pc, #24]	@ (80036b8 <_close_r+0x1c>)
 80036a0:	2300      	movs	r3, #0
 80036a2:	4604      	mov	r4, r0
 80036a4:	4608      	mov	r0, r1
 80036a6:	602b      	str	r3, [r5, #0]
 80036a8:	f7fd fbf0 	bl	8000e8c <_close>
 80036ac:	1c43      	adds	r3, r0, #1
 80036ae:	d102      	bne.n	80036b6 <_close_r+0x1a>
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	b103      	cbz	r3, 80036b6 <_close_r+0x1a>
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	bd38      	pop	{r3, r4, r5, pc}
 80036b8:	20000268 	.word	0x20000268

080036bc <_lseek_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4d07      	ldr	r5, [pc, #28]	@ (80036dc <_lseek_r+0x20>)
 80036c0:	4604      	mov	r4, r0
 80036c2:	4608      	mov	r0, r1
 80036c4:	4611      	mov	r1, r2
 80036c6:	2200      	movs	r2, #0
 80036c8:	602a      	str	r2, [r5, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f7fd fc05 	bl	8000eda <_lseek>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	d102      	bne.n	80036da <_lseek_r+0x1e>
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	b103      	cbz	r3, 80036da <_lseek_r+0x1e>
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	bd38      	pop	{r3, r4, r5, pc}
 80036dc:	20000268 	.word	0x20000268

080036e0 <_read_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4d07      	ldr	r5, [pc, #28]	@ (8003700 <_read_r+0x20>)
 80036e4:	4604      	mov	r4, r0
 80036e6:	4608      	mov	r0, r1
 80036e8:	4611      	mov	r1, r2
 80036ea:	2200      	movs	r2, #0
 80036ec:	602a      	str	r2, [r5, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f7fd fbaf 	bl	8000e52 <_read>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d102      	bne.n	80036fe <_read_r+0x1e>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	b103      	cbz	r3, 80036fe <_read_r+0x1e>
 80036fc:	6023      	str	r3, [r4, #0]
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	20000268 	.word	0x20000268

08003704 <_write_r>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	4d07      	ldr	r5, [pc, #28]	@ (8003724 <_write_r+0x20>)
 8003708:	4604      	mov	r4, r0
 800370a:	4608      	mov	r0, r1
 800370c:	4611      	mov	r1, r2
 800370e:	2200      	movs	r2, #0
 8003710:	602a      	str	r2, [r5, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	f7fd f922 	bl	800095c <_write>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d102      	bne.n	8003722 <_write_r+0x1e>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b103      	cbz	r3, 8003722 <_write_r+0x1e>
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	20000268 	.word	0x20000268

08003728 <__errno>:
 8003728:	4b01      	ldr	r3, [pc, #4]	@ (8003730 <__errno+0x8>)
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000018 	.word	0x20000018

08003734 <__libc_init_array>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	4d0d      	ldr	r5, [pc, #52]	@ (800376c <__libc_init_array+0x38>)
 8003738:	4c0d      	ldr	r4, [pc, #52]	@ (8003770 <__libc_init_array+0x3c>)
 800373a:	1b64      	subs	r4, r4, r5
 800373c:	10a4      	asrs	r4, r4, #2
 800373e:	2600      	movs	r6, #0
 8003740:	42a6      	cmp	r6, r4
 8003742:	d109      	bne.n	8003758 <__libc_init_array+0x24>
 8003744:	4d0b      	ldr	r5, [pc, #44]	@ (8003774 <__libc_init_array+0x40>)
 8003746:	4c0c      	ldr	r4, [pc, #48]	@ (8003778 <__libc_init_array+0x44>)
 8003748:	f000 fd22 	bl	8004190 <_init>
 800374c:	1b64      	subs	r4, r4, r5
 800374e:	10a4      	asrs	r4, r4, #2
 8003750:	2600      	movs	r6, #0
 8003752:	42a6      	cmp	r6, r4
 8003754:	d105      	bne.n	8003762 <__libc_init_array+0x2e>
 8003756:	bd70      	pop	{r4, r5, r6, pc}
 8003758:	f855 3b04 	ldr.w	r3, [r5], #4
 800375c:	4798      	blx	r3
 800375e:	3601      	adds	r6, #1
 8003760:	e7ee      	b.n	8003740 <__libc_init_array+0xc>
 8003762:	f855 3b04 	ldr.w	r3, [r5], #4
 8003766:	4798      	blx	r3
 8003768:	3601      	adds	r6, #1
 800376a:	e7f2      	b.n	8003752 <__libc_init_array+0x1e>
 800376c:	08004468 	.word	0x08004468
 8003770:	08004468 	.word	0x08004468
 8003774:	08004468 	.word	0x08004468
 8003778:	0800446c 	.word	0x0800446c

0800377c <__retarget_lock_init_recursive>:
 800377c:	4770      	bx	lr

0800377e <__retarget_lock_acquire_recursive>:
 800377e:	4770      	bx	lr

08003780 <__retarget_lock_release_recursive>:
 8003780:	4770      	bx	lr
	...

08003784 <_free_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4605      	mov	r5, r0
 8003788:	2900      	cmp	r1, #0
 800378a:	d041      	beq.n	8003810 <_free_r+0x8c>
 800378c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003790:	1f0c      	subs	r4, r1, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	bfb8      	it	lt
 8003796:	18e4      	addlt	r4, r4, r3
 8003798:	f000 f8e0 	bl	800395c <__malloc_lock>
 800379c:	4a1d      	ldr	r2, [pc, #116]	@ (8003814 <_free_r+0x90>)
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	b933      	cbnz	r3, 80037b0 <_free_r+0x2c>
 80037a2:	6063      	str	r3, [r4, #4]
 80037a4:	6014      	str	r4, [r2, #0]
 80037a6:	4628      	mov	r0, r5
 80037a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ac:	f000 b8dc 	b.w	8003968 <__malloc_unlock>
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d908      	bls.n	80037c6 <_free_r+0x42>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	1821      	adds	r1, r4, r0
 80037b8:	428b      	cmp	r3, r1
 80037ba:	bf01      	itttt	eq
 80037bc:	6819      	ldreq	r1, [r3, #0]
 80037be:	685b      	ldreq	r3, [r3, #4]
 80037c0:	1809      	addeq	r1, r1, r0
 80037c2:	6021      	streq	r1, [r4, #0]
 80037c4:	e7ed      	b.n	80037a2 <_free_r+0x1e>
 80037c6:	461a      	mov	r2, r3
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	b10b      	cbz	r3, 80037d0 <_free_r+0x4c>
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d9fa      	bls.n	80037c6 <_free_r+0x42>
 80037d0:	6811      	ldr	r1, [r2, #0]
 80037d2:	1850      	adds	r0, r2, r1
 80037d4:	42a0      	cmp	r0, r4
 80037d6:	d10b      	bne.n	80037f0 <_free_r+0x6c>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	4401      	add	r1, r0
 80037dc:	1850      	adds	r0, r2, r1
 80037de:	4283      	cmp	r3, r0
 80037e0:	6011      	str	r1, [r2, #0]
 80037e2:	d1e0      	bne.n	80037a6 <_free_r+0x22>
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	6053      	str	r3, [r2, #4]
 80037ea:	4408      	add	r0, r1
 80037ec:	6010      	str	r0, [r2, #0]
 80037ee:	e7da      	b.n	80037a6 <_free_r+0x22>
 80037f0:	d902      	bls.n	80037f8 <_free_r+0x74>
 80037f2:	230c      	movs	r3, #12
 80037f4:	602b      	str	r3, [r5, #0]
 80037f6:	e7d6      	b.n	80037a6 <_free_r+0x22>
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	1821      	adds	r1, r4, r0
 80037fc:	428b      	cmp	r3, r1
 80037fe:	bf04      	itt	eq
 8003800:	6819      	ldreq	r1, [r3, #0]
 8003802:	685b      	ldreq	r3, [r3, #4]
 8003804:	6063      	str	r3, [r4, #4]
 8003806:	bf04      	itt	eq
 8003808:	1809      	addeq	r1, r1, r0
 800380a:	6021      	streq	r1, [r4, #0]
 800380c:	6054      	str	r4, [r2, #4]
 800380e:	e7ca      	b.n	80037a6 <_free_r+0x22>
 8003810:	bd38      	pop	{r3, r4, r5, pc}
 8003812:	bf00      	nop
 8003814:	20000274 	.word	0x20000274

08003818 <sbrk_aligned>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4e0f      	ldr	r6, [pc, #60]	@ (8003858 <sbrk_aligned+0x40>)
 800381c:	460c      	mov	r4, r1
 800381e:	6831      	ldr	r1, [r6, #0]
 8003820:	4605      	mov	r5, r0
 8003822:	b911      	cbnz	r1, 800382a <sbrk_aligned+0x12>
 8003824:	f000 fca4 	bl	8004170 <_sbrk_r>
 8003828:	6030      	str	r0, [r6, #0]
 800382a:	4621      	mov	r1, r4
 800382c:	4628      	mov	r0, r5
 800382e:	f000 fc9f 	bl	8004170 <_sbrk_r>
 8003832:	1c43      	adds	r3, r0, #1
 8003834:	d103      	bne.n	800383e <sbrk_aligned+0x26>
 8003836:	f04f 34ff 	mov.w	r4, #4294967295
 800383a:	4620      	mov	r0, r4
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	1cc4      	adds	r4, r0, #3
 8003840:	f024 0403 	bic.w	r4, r4, #3
 8003844:	42a0      	cmp	r0, r4
 8003846:	d0f8      	beq.n	800383a <sbrk_aligned+0x22>
 8003848:	1a21      	subs	r1, r4, r0
 800384a:	4628      	mov	r0, r5
 800384c:	f000 fc90 	bl	8004170 <_sbrk_r>
 8003850:	3001      	adds	r0, #1
 8003852:	d1f2      	bne.n	800383a <sbrk_aligned+0x22>
 8003854:	e7ef      	b.n	8003836 <sbrk_aligned+0x1e>
 8003856:	bf00      	nop
 8003858:	20000270 	.word	0x20000270

0800385c <_malloc_r>:
 800385c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003860:	1ccd      	adds	r5, r1, #3
 8003862:	f025 0503 	bic.w	r5, r5, #3
 8003866:	3508      	adds	r5, #8
 8003868:	2d0c      	cmp	r5, #12
 800386a:	bf38      	it	cc
 800386c:	250c      	movcc	r5, #12
 800386e:	2d00      	cmp	r5, #0
 8003870:	4606      	mov	r6, r0
 8003872:	db01      	blt.n	8003878 <_malloc_r+0x1c>
 8003874:	42a9      	cmp	r1, r5
 8003876:	d904      	bls.n	8003882 <_malloc_r+0x26>
 8003878:	230c      	movs	r3, #12
 800387a:	6033      	str	r3, [r6, #0]
 800387c:	2000      	movs	r0, #0
 800387e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003958 <_malloc_r+0xfc>
 8003886:	f000 f869 	bl	800395c <__malloc_lock>
 800388a:	f8d8 3000 	ldr.w	r3, [r8]
 800388e:	461c      	mov	r4, r3
 8003890:	bb44      	cbnz	r4, 80038e4 <_malloc_r+0x88>
 8003892:	4629      	mov	r1, r5
 8003894:	4630      	mov	r0, r6
 8003896:	f7ff ffbf 	bl	8003818 <sbrk_aligned>
 800389a:	1c43      	adds	r3, r0, #1
 800389c:	4604      	mov	r4, r0
 800389e:	d158      	bne.n	8003952 <_malloc_r+0xf6>
 80038a0:	f8d8 4000 	ldr.w	r4, [r8]
 80038a4:	4627      	mov	r7, r4
 80038a6:	2f00      	cmp	r7, #0
 80038a8:	d143      	bne.n	8003932 <_malloc_r+0xd6>
 80038aa:	2c00      	cmp	r4, #0
 80038ac:	d04b      	beq.n	8003946 <_malloc_r+0xea>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	4639      	mov	r1, r7
 80038b2:	4630      	mov	r0, r6
 80038b4:	eb04 0903 	add.w	r9, r4, r3
 80038b8:	f000 fc5a 	bl	8004170 <_sbrk_r>
 80038bc:	4581      	cmp	r9, r0
 80038be:	d142      	bne.n	8003946 <_malloc_r+0xea>
 80038c0:	6821      	ldr	r1, [r4, #0]
 80038c2:	1a6d      	subs	r5, r5, r1
 80038c4:	4629      	mov	r1, r5
 80038c6:	4630      	mov	r0, r6
 80038c8:	f7ff ffa6 	bl	8003818 <sbrk_aligned>
 80038cc:	3001      	adds	r0, #1
 80038ce:	d03a      	beq.n	8003946 <_malloc_r+0xea>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	442b      	add	r3, r5
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	f8d8 3000 	ldr.w	r3, [r8]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	bb62      	cbnz	r2, 8003938 <_malloc_r+0xdc>
 80038de:	f8c8 7000 	str.w	r7, [r8]
 80038e2:	e00f      	b.n	8003904 <_malloc_r+0xa8>
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	1b52      	subs	r2, r2, r5
 80038e8:	d420      	bmi.n	800392c <_malloc_r+0xd0>
 80038ea:	2a0b      	cmp	r2, #11
 80038ec:	d917      	bls.n	800391e <_malloc_r+0xc2>
 80038ee:	1961      	adds	r1, r4, r5
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	6025      	str	r5, [r4, #0]
 80038f4:	bf18      	it	ne
 80038f6:	6059      	strne	r1, [r3, #4]
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	bf08      	it	eq
 80038fc:	f8c8 1000 	streq.w	r1, [r8]
 8003900:	5162      	str	r2, [r4, r5]
 8003902:	604b      	str	r3, [r1, #4]
 8003904:	4630      	mov	r0, r6
 8003906:	f000 f82f 	bl	8003968 <__malloc_unlock>
 800390a:	f104 000b 	add.w	r0, r4, #11
 800390e:	1d23      	adds	r3, r4, #4
 8003910:	f020 0007 	bic.w	r0, r0, #7
 8003914:	1ac2      	subs	r2, r0, r3
 8003916:	bf1c      	itt	ne
 8003918:	1a1b      	subne	r3, r3, r0
 800391a:	50a3      	strne	r3, [r4, r2]
 800391c:	e7af      	b.n	800387e <_malloc_r+0x22>
 800391e:	6862      	ldr	r2, [r4, #4]
 8003920:	42a3      	cmp	r3, r4
 8003922:	bf0c      	ite	eq
 8003924:	f8c8 2000 	streq.w	r2, [r8]
 8003928:	605a      	strne	r2, [r3, #4]
 800392a:	e7eb      	b.n	8003904 <_malloc_r+0xa8>
 800392c:	4623      	mov	r3, r4
 800392e:	6864      	ldr	r4, [r4, #4]
 8003930:	e7ae      	b.n	8003890 <_malloc_r+0x34>
 8003932:	463c      	mov	r4, r7
 8003934:	687f      	ldr	r7, [r7, #4]
 8003936:	e7b6      	b.n	80038a6 <_malloc_r+0x4a>
 8003938:	461a      	mov	r2, r3
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	42a3      	cmp	r3, r4
 800393e:	d1fb      	bne.n	8003938 <_malloc_r+0xdc>
 8003940:	2300      	movs	r3, #0
 8003942:	6053      	str	r3, [r2, #4]
 8003944:	e7de      	b.n	8003904 <_malloc_r+0xa8>
 8003946:	230c      	movs	r3, #12
 8003948:	6033      	str	r3, [r6, #0]
 800394a:	4630      	mov	r0, r6
 800394c:	f000 f80c 	bl	8003968 <__malloc_unlock>
 8003950:	e794      	b.n	800387c <_malloc_r+0x20>
 8003952:	6005      	str	r5, [r0, #0]
 8003954:	e7d6      	b.n	8003904 <_malloc_r+0xa8>
 8003956:	bf00      	nop
 8003958:	20000274 	.word	0x20000274

0800395c <__malloc_lock>:
 800395c:	4801      	ldr	r0, [pc, #4]	@ (8003964 <__malloc_lock+0x8>)
 800395e:	f7ff bf0e 	b.w	800377e <__retarget_lock_acquire_recursive>
 8003962:	bf00      	nop
 8003964:	2000026c 	.word	0x2000026c

08003968 <__malloc_unlock>:
 8003968:	4801      	ldr	r0, [pc, #4]	@ (8003970 <__malloc_unlock+0x8>)
 800396a:	f7ff bf09 	b.w	8003780 <__retarget_lock_release_recursive>
 800396e:	bf00      	nop
 8003970:	2000026c 	.word	0x2000026c

08003974 <__sfputc_r>:
 8003974:	6893      	ldr	r3, [r2, #8]
 8003976:	3b01      	subs	r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	b410      	push	{r4}
 800397c:	6093      	str	r3, [r2, #8]
 800397e:	da08      	bge.n	8003992 <__sfputc_r+0x1e>
 8003980:	6994      	ldr	r4, [r2, #24]
 8003982:	42a3      	cmp	r3, r4
 8003984:	db01      	blt.n	800398a <__sfputc_r+0x16>
 8003986:	290a      	cmp	r1, #10
 8003988:	d103      	bne.n	8003992 <__sfputc_r+0x1e>
 800398a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800398e:	f7ff bde8 	b.w	8003562 <__swbuf_r>
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	1c58      	adds	r0, r3, #1
 8003996:	6010      	str	r0, [r2, #0]
 8003998:	7019      	strb	r1, [r3, #0]
 800399a:	4608      	mov	r0, r1
 800399c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <__sfputs_r>:
 80039a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a4:	4606      	mov	r6, r0
 80039a6:	460f      	mov	r7, r1
 80039a8:	4614      	mov	r4, r2
 80039aa:	18d5      	adds	r5, r2, r3
 80039ac:	42ac      	cmp	r4, r5
 80039ae:	d101      	bne.n	80039b4 <__sfputs_r+0x12>
 80039b0:	2000      	movs	r0, #0
 80039b2:	e007      	b.n	80039c4 <__sfputs_r+0x22>
 80039b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b8:	463a      	mov	r2, r7
 80039ba:	4630      	mov	r0, r6
 80039bc:	f7ff ffda 	bl	8003974 <__sfputc_r>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d1f3      	bne.n	80039ac <__sfputs_r+0xa>
 80039c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039c8 <_vfiprintf_r>:
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	460d      	mov	r5, r1
 80039ce:	b09d      	sub	sp, #116	@ 0x74
 80039d0:	4614      	mov	r4, r2
 80039d2:	4698      	mov	r8, r3
 80039d4:	4606      	mov	r6, r0
 80039d6:	b118      	cbz	r0, 80039e0 <_vfiprintf_r+0x18>
 80039d8:	6a03      	ldr	r3, [r0, #32]
 80039da:	b90b      	cbnz	r3, 80039e0 <_vfiprintf_r+0x18>
 80039dc:	f7ff fcd8 	bl	8003390 <__sinit>
 80039e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039e2:	07d9      	lsls	r1, r3, #31
 80039e4:	d405      	bmi.n	80039f2 <_vfiprintf_r+0x2a>
 80039e6:	89ab      	ldrh	r3, [r5, #12]
 80039e8:	059a      	lsls	r2, r3, #22
 80039ea:	d402      	bmi.n	80039f2 <_vfiprintf_r+0x2a>
 80039ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039ee:	f7ff fec6 	bl	800377e <__retarget_lock_acquire_recursive>
 80039f2:	89ab      	ldrh	r3, [r5, #12]
 80039f4:	071b      	lsls	r3, r3, #28
 80039f6:	d501      	bpl.n	80039fc <_vfiprintf_r+0x34>
 80039f8:	692b      	ldr	r3, [r5, #16]
 80039fa:	b99b      	cbnz	r3, 8003a24 <_vfiprintf_r+0x5c>
 80039fc:	4629      	mov	r1, r5
 80039fe:	4630      	mov	r0, r6
 8003a00:	f7ff fdee 	bl	80035e0 <__swsetup_r>
 8003a04:	b170      	cbz	r0, 8003a24 <_vfiprintf_r+0x5c>
 8003a06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a08:	07dc      	lsls	r4, r3, #31
 8003a0a:	d504      	bpl.n	8003a16 <_vfiprintf_r+0x4e>
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	b01d      	add	sp, #116	@ 0x74
 8003a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a16:	89ab      	ldrh	r3, [r5, #12]
 8003a18:	0598      	lsls	r0, r3, #22
 8003a1a:	d4f7      	bmi.n	8003a0c <_vfiprintf_r+0x44>
 8003a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a1e:	f7ff feaf 	bl	8003780 <__retarget_lock_release_recursive>
 8003a22:	e7f3      	b.n	8003a0c <_vfiprintf_r+0x44>
 8003a24:	2300      	movs	r3, #0
 8003a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a28:	2320      	movs	r3, #32
 8003a2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a32:	2330      	movs	r3, #48	@ 0x30
 8003a34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003be4 <_vfiprintf_r+0x21c>
 8003a38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a3c:	f04f 0901 	mov.w	r9, #1
 8003a40:	4623      	mov	r3, r4
 8003a42:	469a      	mov	sl, r3
 8003a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a48:	b10a      	cbz	r2, 8003a4e <_vfiprintf_r+0x86>
 8003a4a:	2a25      	cmp	r2, #37	@ 0x25
 8003a4c:	d1f9      	bne.n	8003a42 <_vfiprintf_r+0x7a>
 8003a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8003a52:	d00b      	beq.n	8003a6c <_vfiprintf_r+0xa4>
 8003a54:	465b      	mov	r3, fp
 8003a56:	4622      	mov	r2, r4
 8003a58:	4629      	mov	r1, r5
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f7ff ffa1 	bl	80039a2 <__sfputs_r>
 8003a60:	3001      	adds	r0, #1
 8003a62:	f000 80a7 	beq.w	8003bb4 <_vfiprintf_r+0x1ec>
 8003a66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a68:	445a      	add	r2, fp
 8003a6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 809f 	beq.w	8003bb4 <_vfiprintf_r+0x1ec>
 8003a76:	2300      	movs	r3, #0
 8003a78:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a80:	f10a 0a01 	add.w	sl, sl, #1
 8003a84:	9304      	str	r3, [sp, #16]
 8003a86:	9307      	str	r3, [sp, #28]
 8003a88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a8e:	4654      	mov	r4, sl
 8003a90:	2205      	movs	r2, #5
 8003a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a96:	4853      	ldr	r0, [pc, #332]	@ (8003be4 <_vfiprintf_r+0x21c>)
 8003a98:	f7fc fba2 	bl	80001e0 <memchr>
 8003a9c:	9a04      	ldr	r2, [sp, #16]
 8003a9e:	b9d8      	cbnz	r0, 8003ad8 <_vfiprintf_r+0x110>
 8003aa0:	06d1      	lsls	r1, r2, #27
 8003aa2:	bf44      	itt	mi
 8003aa4:	2320      	movmi	r3, #32
 8003aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aaa:	0713      	lsls	r3, r2, #28
 8003aac:	bf44      	itt	mi
 8003aae:	232b      	movmi	r3, #43	@ 0x2b
 8003ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aba:	d015      	beq.n	8003ae8 <_vfiprintf_r+0x120>
 8003abc:	9a07      	ldr	r2, [sp, #28]
 8003abe:	4654      	mov	r4, sl
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f04f 0c0a 	mov.w	ip, #10
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003acc:	3b30      	subs	r3, #48	@ 0x30
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d94b      	bls.n	8003b6a <_vfiprintf_r+0x1a2>
 8003ad2:	b1b0      	cbz	r0, 8003b02 <_vfiprintf_r+0x13a>
 8003ad4:	9207      	str	r2, [sp, #28]
 8003ad6:	e014      	b.n	8003b02 <_vfiprintf_r+0x13a>
 8003ad8:	eba0 0308 	sub.w	r3, r0, r8
 8003adc:	fa09 f303 	lsl.w	r3, r9, r3
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	9304      	str	r3, [sp, #16]
 8003ae4:	46a2      	mov	sl, r4
 8003ae6:	e7d2      	b.n	8003a8e <_vfiprintf_r+0xc6>
 8003ae8:	9b03      	ldr	r3, [sp, #12]
 8003aea:	1d19      	adds	r1, r3, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	9103      	str	r1, [sp, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bfbb      	ittet	lt
 8003af4:	425b      	neglt	r3, r3
 8003af6:	f042 0202 	orrlt.w	r2, r2, #2
 8003afa:	9307      	strge	r3, [sp, #28]
 8003afc:	9307      	strlt	r3, [sp, #28]
 8003afe:	bfb8      	it	lt
 8003b00:	9204      	strlt	r2, [sp, #16]
 8003b02:	7823      	ldrb	r3, [r4, #0]
 8003b04:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b06:	d10a      	bne.n	8003b1e <_vfiprintf_r+0x156>
 8003b08:	7863      	ldrb	r3, [r4, #1]
 8003b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b0c:	d132      	bne.n	8003b74 <_vfiprintf_r+0x1ac>
 8003b0e:	9b03      	ldr	r3, [sp, #12]
 8003b10:	1d1a      	adds	r2, r3, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	9203      	str	r2, [sp, #12]
 8003b16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b1a:	3402      	adds	r4, #2
 8003b1c:	9305      	str	r3, [sp, #20]
 8003b1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003bf4 <_vfiprintf_r+0x22c>
 8003b22:	7821      	ldrb	r1, [r4, #0]
 8003b24:	2203      	movs	r2, #3
 8003b26:	4650      	mov	r0, sl
 8003b28:	f7fc fb5a 	bl	80001e0 <memchr>
 8003b2c:	b138      	cbz	r0, 8003b3e <_vfiprintf_r+0x176>
 8003b2e:	9b04      	ldr	r3, [sp, #16]
 8003b30:	eba0 000a 	sub.w	r0, r0, sl
 8003b34:	2240      	movs	r2, #64	@ 0x40
 8003b36:	4082      	lsls	r2, r0
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	3401      	adds	r4, #1
 8003b3c:	9304      	str	r3, [sp, #16]
 8003b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b42:	4829      	ldr	r0, [pc, #164]	@ (8003be8 <_vfiprintf_r+0x220>)
 8003b44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b48:	2206      	movs	r2, #6
 8003b4a:	f7fc fb49 	bl	80001e0 <memchr>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d03f      	beq.n	8003bd2 <_vfiprintf_r+0x20a>
 8003b52:	4b26      	ldr	r3, [pc, #152]	@ (8003bec <_vfiprintf_r+0x224>)
 8003b54:	bb1b      	cbnz	r3, 8003b9e <_vfiprintf_r+0x1d6>
 8003b56:	9b03      	ldr	r3, [sp, #12]
 8003b58:	3307      	adds	r3, #7
 8003b5a:	f023 0307 	bic.w	r3, r3, #7
 8003b5e:	3308      	adds	r3, #8
 8003b60:	9303      	str	r3, [sp, #12]
 8003b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b64:	443b      	add	r3, r7
 8003b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b68:	e76a      	b.n	8003a40 <_vfiprintf_r+0x78>
 8003b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b6e:	460c      	mov	r4, r1
 8003b70:	2001      	movs	r0, #1
 8003b72:	e7a8      	b.n	8003ac6 <_vfiprintf_r+0xfe>
 8003b74:	2300      	movs	r3, #0
 8003b76:	3401      	adds	r4, #1
 8003b78:	9305      	str	r3, [sp, #20]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f04f 0c0a 	mov.w	ip, #10
 8003b80:	4620      	mov	r0, r4
 8003b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b86:	3a30      	subs	r2, #48	@ 0x30
 8003b88:	2a09      	cmp	r2, #9
 8003b8a:	d903      	bls.n	8003b94 <_vfiprintf_r+0x1cc>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0c6      	beq.n	8003b1e <_vfiprintf_r+0x156>
 8003b90:	9105      	str	r1, [sp, #20]
 8003b92:	e7c4      	b.n	8003b1e <_vfiprintf_r+0x156>
 8003b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b98:	4604      	mov	r4, r0
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e7f0      	b.n	8003b80 <_vfiprintf_r+0x1b8>
 8003b9e:	ab03      	add	r3, sp, #12
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	462a      	mov	r2, r5
 8003ba4:	4b12      	ldr	r3, [pc, #72]	@ (8003bf0 <_vfiprintf_r+0x228>)
 8003ba6:	a904      	add	r1, sp, #16
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f3af 8000 	nop.w
 8003bae:	4607      	mov	r7, r0
 8003bb0:	1c78      	adds	r0, r7, #1
 8003bb2:	d1d6      	bne.n	8003b62 <_vfiprintf_r+0x19a>
 8003bb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bb6:	07d9      	lsls	r1, r3, #31
 8003bb8:	d405      	bmi.n	8003bc6 <_vfiprintf_r+0x1fe>
 8003bba:	89ab      	ldrh	r3, [r5, #12]
 8003bbc:	059a      	lsls	r2, r3, #22
 8003bbe:	d402      	bmi.n	8003bc6 <_vfiprintf_r+0x1fe>
 8003bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bc2:	f7ff fddd 	bl	8003780 <__retarget_lock_release_recursive>
 8003bc6:	89ab      	ldrh	r3, [r5, #12]
 8003bc8:	065b      	lsls	r3, r3, #25
 8003bca:	f53f af1f 	bmi.w	8003a0c <_vfiprintf_r+0x44>
 8003bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bd0:	e71e      	b.n	8003a10 <_vfiprintf_r+0x48>
 8003bd2:	ab03      	add	r3, sp, #12
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	462a      	mov	r2, r5
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <_vfiprintf_r+0x228>)
 8003bda:	a904      	add	r1, sp, #16
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f000 f879 	bl	8003cd4 <_printf_i>
 8003be2:	e7e4      	b.n	8003bae <_vfiprintf_r+0x1e6>
 8003be4:	0800442c 	.word	0x0800442c
 8003be8:	08004436 	.word	0x08004436
 8003bec:	00000000 	.word	0x00000000
 8003bf0:	080039a3 	.word	0x080039a3
 8003bf4:	08004432 	.word	0x08004432

08003bf8 <_printf_common>:
 8003bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bfc:	4616      	mov	r6, r2
 8003bfe:	4698      	mov	r8, r3
 8003c00:	688a      	ldr	r2, [r1, #8]
 8003c02:	690b      	ldr	r3, [r1, #16]
 8003c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bfb8      	it	lt
 8003c0c:	4613      	movlt	r3, r2
 8003c0e:	6033      	str	r3, [r6, #0]
 8003c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c14:	4607      	mov	r7, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	b10a      	cbz	r2, 8003c1e <_printf_common+0x26>
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	0699      	lsls	r1, r3, #26
 8003c22:	bf42      	ittt	mi
 8003c24:	6833      	ldrmi	r3, [r6, #0]
 8003c26:	3302      	addmi	r3, #2
 8003c28:	6033      	strmi	r3, [r6, #0]
 8003c2a:	6825      	ldr	r5, [r4, #0]
 8003c2c:	f015 0506 	ands.w	r5, r5, #6
 8003c30:	d106      	bne.n	8003c40 <_printf_common+0x48>
 8003c32:	f104 0a19 	add.w	sl, r4, #25
 8003c36:	68e3      	ldr	r3, [r4, #12]
 8003c38:	6832      	ldr	r2, [r6, #0]
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	42ab      	cmp	r3, r5
 8003c3e:	dc26      	bgt.n	8003c8e <_printf_common+0x96>
 8003c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c44:	6822      	ldr	r2, [r4, #0]
 8003c46:	3b00      	subs	r3, #0
 8003c48:	bf18      	it	ne
 8003c4a:	2301      	movne	r3, #1
 8003c4c:	0692      	lsls	r2, r2, #26
 8003c4e:	d42b      	bmi.n	8003ca8 <_printf_common+0xb0>
 8003c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c54:	4641      	mov	r1, r8
 8003c56:	4638      	mov	r0, r7
 8003c58:	47c8      	blx	r9
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d01e      	beq.n	8003c9c <_printf_common+0xa4>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	6922      	ldr	r2, [r4, #16]
 8003c62:	f003 0306 	and.w	r3, r3, #6
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf02      	ittt	eq
 8003c6a:	68e5      	ldreq	r5, [r4, #12]
 8003c6c:	6833      	ldreq	r3, [r6, #0]
 8003c6e:	1aed      	subeq	r5, r5, r3
 8003c70:	68a3      	ldr	r3, [r4, #8]
 8003c72:	bf0c      	ite	eq
 8003c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c78:	2500      	movne	r5, #0
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	bfc4      	itt	gt
 8003c7e:	1a9b      	subgt	r3, r3, r2
 8003c80:	18ed      	addgt	r5, r5, r3
 8003c82:	2600      	movs	r6, #0
 8003c84:	341a      	adds	r4, #26
 8003c86:	42b5      	cmp	r5, r6
 8003c88:	d11a      	bne.n	8003cc0 <_printf_common+0xc8>
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	e008      	b.n	8003ca0 <_printf_common+0xa8>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	4652      	mov	r2, sl
 8003c92:	4641      	mov	r1, r8
 8003c94:	4638      	mov	r0, r7
 8003c96:	47c8      	blx	r9
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d103      	bne.n	8003ca4 <_printf_common+0xac>
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca4:	3501      	adds	r5, #1
 8003ca6:	e7c6      	b.n	8003c36 <_printf_common+0x3e>
 8003ca8:	18e1      	adds	r1, r4, r3
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	2030      	movs	r0, #48	@ 0x30
 8003cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cb2:	4422      	add	r2, r4
 8003cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	e7c7      	b.n	8003c50 <_printf_common+0x58>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	47c8      	blx	r9
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d0e6      	beq.n	8003c9c <_printf_common+0xa4>
 8003cce:	3601      	adds	r6, #1
 8003cd0:	e7d9      	b.n	8003c86 <_printf_common+0x8e>
	...

08003cd4 <_printf_i>:
 8003cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	7e0f      	ldrb	r7, [r1, #24]
 8003cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cdc:	2f78      	cmp	r7, #120	@ 0x78
 8003cde:	4691      	mov	r9, r2
 8003ce0:	4680      	mov	r8, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	469a      	mov	sl, r3
 8003ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cea:	d807      	bhi.n	8003cfc <_printf_i+0x28>
 8003cec:	2f62      	cmp	r7, #98	@ 0x62
 8003cee:	d80a      	bhi.n	8003d06 <_printf_i+0x32>
 8003cf0:	2f00      	cmp	r7, #0
 8003cf2:	f000 80d1 	beq.w	8003e98 <_printf_i+0x1c4>
 8003cf6:	2f58      	cmp	r7, #88	@ 0x58
 8003cf8:	f000 80b8 	beq.w	8003e6c <_printf_i+0x198>
 8003cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d04:	e03a      	b.n	8003d7c <_printf_i+0xa8>
 8003d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d0a:	2b15      	cmp	r3, #21
 8003d0c:	d8f6      	bhi.n	8003cfc <_printf_i+0x28>
 8003d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8003d14 <_printf_i+0x40>)
 8003d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d14:	08003d6d 	.word	0x08003d6d
 8003d18:	08003d81 	.word	0x08003d81
 8003d1c:	08003cfd 	.word	0x08003cfd
 8003d20:	08003cfd 	.word	0x08003cfd
 8003d24:	08003cfd 	.word	0x08003cfd
 8003d28:	08003cfd 	.word	0x08003cfd
 8003d2c:	08003d81 	.word	0x08003d81
 8003d30:	08003cfd 	.word	0x08003cfd
 8003d34:	08003cfd 	.word	0x08003cfd
 8003d38:	08003cfd 	.word	0x08003cfd
 8003d3c:	08003cfd 	.word	0x08003cfd
 8003d40:	08003e7f 	.word	0x08003e7f
 8003d44:	08003dab 	.word	0x08003dab
 8003d48:	08003e39 	.word	0x08003e39
 8003d4c:	08003cfd 	.word	0x08003cfd
 8003d50:	08003cfd 	.word	0x08003cfd
 8003d54:	08003ea1 	.word	0x08003ea1
 8003d58:	08003cfd 	.word	0x08003cfd
 8003d5c:	08003dab 	.word	0x08003dab
 8003d60:	08003cfd 	.word	0x08003cfd
 8003d64:	08003cfd 	.word	0x08003cfd
 8003d68:	08003e41 	.word	0x08003e41
 8003d6c:	6833      	ldr	r3, [r6, #0]
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6032      	str	r2, [r6, #0]
 8003d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e09c      	b.n	8003eba <_printf_i+0x1e6>
 8003d80:	6833      	ldr	r3, [r6, #0]
 8003d82:	6820      	ldr	r0, [r4, #0]
 8003d84:	1d19      	adds	r1, r3, #4
 8003d86:	6031      	str	r1, [r6, #0]
 8003d88:	0606      	lsls	r6, r0, #24
 8003d8a:	d501      	bpl.n	8003d90 <_printf_i+0xbc>
 8003d8c:	681d      	ldr	r5, [r3, #0]
 8003d8e:	e003      	b.n	8003d98 <_printf_i+0xc4>
 8003d90:	0645      	lsls	r5, r0, #25
 8003d92:	d5fb      	bpl.n	8003d8c <_printf_i+0xb8>
 8003d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d98:	2d00      	cmp	r5, #0
 8003d9a:	da03      	bge.n	8003da4 <_printf_i+0xd0>
 8003d9c:	232d      	movs	r3, #45	@ 0x2d
 8003d9e:	426d      	negs	r5, r5
 8003da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003da4:	4858      	ldr	r0, [pc, #352]	@ (8003f08 <_printf_i+0x234>)
 8003da6:	230a      	movs	r3, #10
 8003da8:	e011      	b.n	8003dce <_printf_i+0xfa>
 8003daa:	6821      	ldr	r1, [r4, #0]
 8003dac:	6833      	ldr	r3, [r6, #0]
 8003dae:	0608      	lsls	r0, r1, #24
 8003db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003db4:	d402      	bmi.n	8003dbc <_printf_i+0xe8>
 8003db6:	0649      	lsls	r1, r1, #25
 8003db8:	bf48      	it	mi
 8003dba:	b2ad      	uxthmi	r5, r5
 8003dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dbe:	4852      	ldr	r0, [pc, #328]	@ (8003f08 <_printf_i+0x234>)
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	bf14      	ite	ne
 8003dc4:	230a      	movne	r3, #10
 8003dc6:	2308      	moveq	r3, #8
 8003dc8:	2100      	movs	r1, #0
 8003dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dce:	6866      	ldr	r6, [r4, #4]
 8003dd0:	60a6      	str	r6, [r4, #8]
 8003dd2:	2e00      	cmp	r6, #0
 8003dd4:	db05      	blt.n	8003de2 <_printf_i+0x10e>
 8003dd6:	6821      	ldr	r1, [r4, #0]
 8003dd8:	432e      	orrs	r6, r5
 8003dda:	f021 0104 	bic.w	r1, r1, #4
 8003dde:	6021      	str	r1, [r4, #0]
 8003de0:	d04b      	beq.n	8003e7a <_printf_i+0x1a6>
 8003de2:	4616      	mov	r6, r2
 8003de4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003de8:	fb03 5711 	mls	r7, r3, r1, r5
 8003dec:	5dc7      	ldrb	r7, [r0, r7]
 8003dee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003df2:	462f      	mov	r7, r5
 8003df4:	42bb      	cmp	r3, r7
 8003df6:	460d      	mov	r5, r1
 8003df8:	d9f4      	bls.n	8003de4 <_printf_i+0x110>
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d10b      	bne.n	8003e16 <_printf_i+0x142>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	07df      	lsls	r7, r3, #31
 8003e02:	d508      	bpl.n	8003e16 <_printf_i+0x142>
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	6861      	ldr	r1, [r4, #4]
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	bfde      	ittt	le
 8003e0c:	2330      	movle	r3, #48	@ 0x30
 8003e0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e16:	1b92      	subs	r2, r2, r6
 8003e18:	6122      	str	r2, [r4, #16]
 8003e1a:	f8cd a000 	str.w	sl, [sp]
 8003e1e:	464b      	mov	r3, r9
 8003e20:	aa03      	add	r2, sp, #12
 8003e22:	4621      	mov	r1, r4
 8003e24:	4640      	mov	r0, r8
 8003e26:	f7ff fee7 	bl	8003bf8 <_printf_common>
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d14a      	bne.n	8003ec4 <_printf_i+0x1f0>
 8003e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e32:	b004      	add	sp, #16
 8003e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	f043 0320 	orr.w	r3, r3, #32
 8003e3e:	6023      	str	r3, [r4, #0]
 8003e40:	4832      	ldr	r0, [pc, #200]	@ (8003f0c <_printf_i+0x238>)
 8003e42:	2778      	movs	r7, #120	@ 0x78
 8003e44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	6831      	ldr	r1, [r6, #0]
 8003e4c:	061f      	lsls	r7, r3, #24
 8003e4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e52:	d402      	bmi.n	8003e5a <_printf_i+0x186>
 8003e54:	065f      	lsls	r7, r3, #25
 8003e56:	bf48      	it	mi
 8003e58:	b2ad      	uxthmi	r5, r5
 8003e5a:	6031      	str	r1, [r6, #0]
 8003e5c:	07d9      	lsls	r1, r3, #31
 8003e5e:	bf44      	itt	mi
 8003e60:	f043 0320 	orrmi.w	r3, r3, #32
 8003e64:	6023      	strmi	r3, [r4, #0]
 8003e66:	b11d      	cbz	r5, 8003e70 <_printf_i+0x19c>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	e7ad      	b.n	8003dc8 <_printf_i+0xf4>
 8003e6c:	4826      	ldr	r0, [pc, #152]	@ (8003f08 <_printf_i+0x234>)
 8003e6e:	e7e9      	b.n	8003e44 <_printf_i+0x170>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f023 0320 	bic.w	r3, r3, #32
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	e7f6      	b.n	8003e68 <_printf_i+0x194>
 8003e7a:	4616      	mov	r6, r2
 8003e7c:	e7bd      	b.n	8003dfa <_printf_i+0x126>
 8003e7e:	6833      	ldr	r3, [r6, #0]
 8003e80:	6825      	ldr	r5, [r4, #0]
 8003e82:	6961      	ldr	r1, [r4, #20]
 8003e84:	1d18      	adds	r0, r3, #4
 8003e86:	6030      	str	r0, [r6, #0]
 8003e88:	062e      	lsls	r6, r5, #24
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	d501      	bpl.n	8003e92 <_printf_i+0x1be>
 8003e8e:	6019      	str	r1, [r3, #0]
 8003e90:	e002      	b.n	8003e98 <_printf_i+0x1c4>
 8003e92:	0668      	lsls	r0, r5, #25
 8003e94:	d5fb      	bpl.n	8003e8e <_printf_i+0x1ba>
 8003e96:	8019      	strh	r1, [r3, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6123      	str	r3, [r4, #16]
 8003e9c:	4616      	mov	r6, r2
 8003e9e:	e7bc      	b.n	8003e1a <_printf_i+0x146>
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	1d1a      	adds	r2, r3, #4
 8003ea4:	6032      	str	r2, [r6, #0]
 8003ea6:	681e      	ldr	r6, [r3, #0]
 8003ea8:	6862      	ldr	r2, [r4, #4]
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7fc f997 	bl	80001e0 <memchr>
 8003eb2:	b108      	cbz	r0, 8003eb8 <_printf_i+0x1e4>
 8003eb4:	1b80      	subs	r0, r0, r6
 8003eb6:	6060      	str	r0, [r4, #4]
 8003eb8:	6863      	ldr	r3, [r4, #4]
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ec2:	e7aa      	b.n	8003e1a <_printf_i+0x146>
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4640      	mov	r0, r8
 8003ecc:	47d0      	blx	sl
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d0ad      	beq.n	8003e2e <_printf_i+0x15a>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	079b      	lsls	r3, r3, #30
 8003ed6:	d413      	bmi.n	8003f00 <_printf_i+0x22c>
 8003ed8:	68e0      	ldr	r0, [r4, #12]
 8003eda:	9b03      	ldr	r3, [sp, #12]
 8003edc:	4298      	cmp	r0, r3
 8003ede:	bfb8      	it	lt
 8003ee0:	4618      	movlt	r0, r3
 8003ee2:	e7a6      	b.n	8003e32 <_printf_i+0x15e>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	4649      	mov	r1, r9
 8003eea:	4640      	mov	r0, r8
 8003eec:	47d0      	blx	sl
 8003eee:	3001      	adds	r0, #1
 8003ef0:	d09d      	beq.n	8003e2e <_printf_i+0x15a>
 8003ef2:	3501      	adds	r5, #1
 8003ef4:	68e3      	ldr	r3, [r4, #12]
 8003ef6:	9903      	ldr	r1, [sp, #12]
 8003ef8:	1a5b      	subs	r3, r3, r1
 8003efa:	42ab      	cmp	r3, r5
 8003efc:	dcf2      	bgt.n	8003ee4 <_printf_i+0x210>
 8003efe:	e7eb      	b.n	8003ed8 <_printf_i+0x204>
 8003f00:	2500      	movs	r5, #0
 8003f02:	f104 0619 	add.w	r6, r4, #25
 8003f06:	e7f5      	b.n	8003ef4 <_printf_i+0x220>
 8003f08:	0800443d 	.word	0x0800443d
 8003f0c:	0800444e 	.word	0x0800444e

08003f10 <__sflush_r>:
 8003f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f18:	0716      	lsls	r6, r2, #28
 8003f1a:	4605      	mov	r5, r0
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	d454      	bmi.n	8003fca <__sflush_r+0xba>
 8003f20:	684b      	ldr	r3, [r1, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	dc02      	bgt.n	8003f2c <__sflush_r+0x1c>
 8003f26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	dd48      	ble.n	8003fbe <__sflush_r+0xae>
 8003f2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f2e:	2e00      	cmp	r6, #0
 8003f30:	d045      	beq.n	8003fbe <__sflush_r+0xae>
 8003f32:	2300      	movs	r3, #0
 8003f34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f38:	682f      	ldr	r7, [r5, #0]
 8003f3a:	6a21      	ldr	r1, [r4, #32]
 8003f3c:	602b      	str	r3, [r5, #0]
 8003f3e:	d030      	beq.n	8003fa2 <__sflush_r+0x92>
 8003f40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f42:	89a3      	ldrh	r3, [r4, #12]
 8003f44:	0759      	lsls	r1, r3, #29
 8003f46:	d505      	bpl.n	8003f54 <__sflush_r+0x44>
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	1ad2      	subs	r2, r2, r3
 8003f4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f4e:	b10b      	cbz	r3, 8003f54 <__sflush_r+0x44>
 8003f50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f52:	1ad2      	subs	r2, r2, r3
 8003f54:	2300      	movs	r3, #0
 8003f56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f58:	6a21      	ldr	r1, [r4, #32]
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	47b0      	blx	r6
 8003f5e:	1c43      	adds	r3, r0, #1
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	d106      	bne.n	8003f72 <__sflush_r+0x62>
 8003f64:	6829      	ldr	r1, [r5, #0]
 8003f66:	291d      	cmp	r1, #29
 8003f68:	d82b      	bhi.n	8003fc2 <__sflush_r+0xb2>
 8003f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004014 <__sflush_r+0x104>)
 8003f6c:	40ca      	lsrs	r2, r1
 8003f6e:	07d6      	lsls	r6, r2, #31
 8003f70:	d527      	bpl.n	8003fc2 <__sflush_r+0xb2>
 8003f72:	2200      	movs	r2, #0
 8003f74:	6062      	str	r2, [r4, #4]
 8003f76:	04d9      	lsls	r1, r3, #19
 8003f78:	6922      	ldr	r2, [r4, #16]
 8003f7a:	6022      	str	r2, [r4, #0]
 8003f7c:	d504      	bpl.n	8003f88 <__sflush_r+0x78>
 8003f7e:	1c42      	adds	r2, r0, #1
 8003f80:	d101      	bne.n	8003f86 <__sflush_r+0x76>
 8003f82:	682b      	ldr	r3, [r5, #0]
 8003f84:	b903      	cbnz	r3, 8003f88 <__sflush_r+0x78>
 8003f86:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f8a:	602f      	str	r7, [r5, #0]
 8003f8c:	b1b9      	cbz	r1, 8003fbe <__sflush_r+0xae>
 8003f8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f92:	4299      	cmp	r1, r3
 8003f94:	d002      	beq.n	8003f9c <__sflush_r+0x8c>
 8003f96:	4628      	mov	r0, r5
 8003f98:	f7ff fbf4 	bl	8003784 <_free_r>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fa0:	e00d      	b.n	8003fbe <__sflush_r+0xae>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b0      	blx	r6
 8003fa8:	4602      	mov	r2, r0
 8003faa:	1c50      	adds	r0, r2, #1
 8003fac:	d1c9      	bne.n	8003f42 <__sflush_r+0x32>
 8003fae:	682b      	ldr	r3, [r5, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0c6      	beq.n	8003f42 <__sflush_r+0x32>
 8003fb4:	2b1d      	cmp	r3, #29
 8003fb6:	d001      	beq.n	8003fbc <__sflush_r+0xac>
 8003fb8:	2b16      	cmp	r3, #22
 8003fba:	d11e      	bne.n	8003ffa <__sflush_r+0xea>
 8003fbc:	602f      	str	r7, [r5, #0]
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	e022      	b.n	8004008 <__sflush_r+0xf8>
 8003fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc6:	b21b      	sxth	r3, r3
 8003fc8:	e01b      	b.n	8004002 <__sflush_r+0xf2>
 8003fca:	690f      	ldr	r7, [r1, #16]
 8003fcc:	2f00      	cmp	r7, #0
 8003fce:	d0f6      	beq.n	8003fbe <__sflush_r+0xae>
 8003fd0:	0793      	lsls	r3, r2, #30
 8003fd2:	680e      	ldr	r6, [r1, #0]
 8003fd4:	bf08      	it	eq
 8003fd6:	694b      	ldreq	r3, [r1, #20]
 8003fd8:	600f      	str	r7, [r1, #0]
 8003fda:	bf18      	it	ne
 8003fdc:	2300      	movne	r3, #0
 8003fde:	eba6 0807 	sub.w	r8, r6, r7
 8003fe2:	608b      	str	r3, [r1, #8]
 8003fe4:	f1b8 0f00 	cmp.w	r8, #0
 8003fe8:	dde9      	ble.n	8003fbe <__sflush_r+0xae>
 8003fea:	6a21      	ldr	r1, [r4, #32]
 8003fec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003fee:	4643      	mov	r3, r8
 8003ff0:	463a      	mov	r2, r7
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	47b0      	blx	r6
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	dc08      	bgt.n	800400c <__sflush_r+0xfc>
 8003ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004002:	81a3      	strh	r3, [r4, #12]
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800400c:	4407      	add	r7, r0
 800400e:	eba8 0800 	sub.w	r8, r8, r0
 8004012:	e7e7      	b.n	8003fe4 <__sflush_r+0xd4>
 8004014:	20400001 	.word	0x20400001

08004018 <_fflush_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	690b      	ldr	r3, [r1, #16]
 800401c:	4605      	mov	r5, r0
 800401e:	460c      	mov	r4, r1
 8004020:	b913      	cbnz	r3, 8004028 <_fflush_r+0x10>
 8004022:	2500      	movs	r5, #0
 8004024:	4628      	mov	r0, r5
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	b118      	cbz	r0, 8004032 <_fflush_r+0x1a>
 800402a:	6a03      	ldr	r3, [r0, #32]
 800402c:	b90b      	cbnz	r3, 8004032 <_fflush_r+0x1a>
 800402e:	f7ff f9af 	bl	8003390 <__sinit>
 8004032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f3      	beq.n	8004022 <_fflush_r+0xa>
 800403a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800403c:	07d0      	lsls	r0, r2, #31
 800403e:	d404      	bmi.n	800404a <_fflush_r+0x32>
 8004040:	0599      	lsls	r1, r3, #22
 8004042:	d402      	bmi.n	800404a <_fflush_r+0x32>
 8004044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004046:	f7ff fb9a 	bl	800377e <__retarget_lock_acquire_recursive>
 800404a:	4628      	mov	r0, r5
 800404c:	4621      	mov	r1, r4
 800404e:	f7ff ff5f 	bl	8003f10 <__sflush_r>
 8004052:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004054:	07da      	lsls	r2, r3, #31
 8004056:	4605      	mov	r5, r0
 8004058:	d4e4      	bmi.n	8004024 <_fflush_r+0xc>
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	059b      	lsls	r3, r3, #22
 800405e:	d4e1      	bmi.n	8004024 <_fflush_r+0xc>
 8004060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004062:	f7ff fb8d 	bl	8003780 <__retarget_lock_release_recursive>
 8004066:	e7dd      	b.n	8004024 <_fflush_r+0xc>

08004068 <__swhatbuf_r>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	460c      	mov	r4, r1
 800406c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004070:	2900      	cmp	r1, #0
 8004072:	b096      	sub	sp, #88	@ 0x58
 8004074:	4615      	mov	r5, r2
 8004076:	461e      	mov	r6, r3
 8004078:	da0d      	bge.n	8004096 <__swhatbuf_r+0x2e>
 800407a:	89a3      	ldrh	r3, [r4, #12]
 800407c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	bf14      	ite	ne
 8004086:	2340      	movne	r3, #64	@ 0x40
 8004088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800408c:	2000      	movs	r0, #0
 800408e:	6031      	str	r1, [r6, #0]
 8004090:	602b      	str	r3, [r5, #0]
 8004092:	b016      	add	sp, #88	@ 0x58
 8004094:	bd70      	pop	{r4, r5, r6, pc}
 8004096:	466a      	mov	r2, sp
 8004098:	f000 f848 	bl	800412c <_fstat_r>
 800409c:	2800      	cmp	r0, #0
 800409e:	dbec      	blt.n	800407a <__swhatbuf_r+0x12>
 80040a0:	9901      	ldr	r1, [sp, #4]
 80040a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80040a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80040aa:	4259      	negs	r1, r3
 80040ac:	4159      	adcs	r1, r3
 80040ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040b2:	e7eb      	b.n	800408c <__swhatbuf_r+0x24>

080040b4 <__smakebuf_r>:
 80040b4:	898b      	ldrh	r3, [r1, #12]
 80040b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040b8:	079d      	lsls	r5, r3, #30
 80040ba:	4606      	mov	r6, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	d507      	bpl.n	80040d0 <__smakebuf_r+0x1c>
 80040c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	6123      	str	r3, [r4, #16]
 80040c8:	2301      	movs	r3, #1
 80040ca:	6163      	str	r3, [r4, #20]
 80040cc:	b003      	add	sp, #12
 80040ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d0:	ab01      	add	r3, sp, #4
 80040d2:	466a      	mov	r2, sp
 80040d4:	f7ff ffc8 	bl	8004068 <__swhatbuf_r>
 80040d8:	9f00      	ldr	r7, [sp, #0]
 80040da:	4605      	mov	r5, r0
 80040dc:	4639      	mov	r1, r7
 80040de:	4630      	mov	r0, r6
 80040e0:	f7ff fbbc 	bl	800385c <_malloc_r>
 80040e4:	b948      	cbnz	r0, 80040fa <__smakebuf_r+0x46>
 80040e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ea:	059a      	lsls	r2, r3, #22
 80040ec:	d4ee      	bmi.n	80040cc <__smakebuf_r+0x18>
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	f043 0302 	orr.w	r3, r3, #2
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	e7e2      	b.n	80040c0 <__smakebuf_r+0xc>
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	6020      	str	r0, [r4, #0]
 80040fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	9b01      	ldr	r3, [sp, #4]
 8004106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800410a:	b15b      	cbz	r3, 8004124 <__smakebuf_r+0x70>
 800410c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004110:	4630      	mov	r0, r6
 8004112:	f000 f81d 	bl	8004150 <_isatty_r>
 8004116:	b128      	cbz	r0, 8004124 <__smakebuf_r+0x70>
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	431d      	orrs	r5, r3
 8004128:	81a5      	strh	r5, [r4, #12]
 800412a:	e7cf      	b.n	80040cc <__smakebuf_r+0x18>

0800412c <_fstat_r>:
 800412c:	b538      	push	{r3, r4, r5, lr}
 800412e:	4d07      	ldr	r5, [pc, #28]	@ (800414c <_fstat_r+0x20>)
 8004130:	2300      	movs	r3, #0
 8004132:	4604      	mov	r4, r0
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	602b      	str	r3, [r5, #0]
 800413a:	f7fc feb3 	bl	8000ea4 <_fstat>
 800413e:	1c43      	adds	r3, r0, #1
 8004140:	d102      	bne.n	8004148 <_fstat_r+0x1c>
 8004142:	682b      	ldr	r3, [r5, #0]
 8004144:	b103      	cbz	r3, 8004148 <_fstat_r+0x1c>
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	bd38      	pop	{r3, r4, r5, pc}
 800414a:	bf00      	nop
 800414c:	20000268 	.word	0x20000268

08004150 <_isatty_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4d06      	ldr	r5, [pc, #24]	@ (800416c <_isatty_r+0x1c>)
 8004154:	2300      	movs	r3, #0
 8004156:	4604      	mov	r4, r0
 8004158:	4608      	mov	r0, r1
 800415a:	602b      	str	r3, [r5, #0]
 800415c:	f7fc feb2 	bl	8000ec4 <_isatty>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	d102      	bne.n	800416a <_isatty_r+0x1a>
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	b103      	cbz	r3, 800416a <_isatty_r+0x1a>
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	20000268 	.word	0x20000268

08004170 <_sbrk_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4d06      	ldr	r5, [pc, #24]	@ (800418c <_sbrk_r+0x1c>)
 8004174:	2300      	movs	r3, #0
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	602b      	str	r3, [r5, #0]
 800417c:	f7fc feba 	bl	8000ef4 <_sbrk>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_sbrk_r+0x1a>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_sbrk_r+0x1a>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000268 	.word	0x20000268

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
